{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "listing1=pd.read_csv(r'/Users/salmaa/Desktop/listingsnew.csv') \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>listing_url</th>\n",
       "      <th>scrape_id</th>\n",
       "      <th>last_scraped</th>\n",
       "      <th>name</th>\n",
       "      <th>description</th>\n",
       "      <th>neighborhood_overview</th>\n",
       "      <th>picture_url</th>\n",
       "      <th>host_id</th>\n",
       "      <th>host_url</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2384</td>\n",
       "      <td>https://www.airbnb.com/rooms/2384</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>Hyde Park - Walk to UChicago, 10 min to McCormick</td>\n",
       "      <td>Visiting The University of Chicago or attendin...</td>\n",
       "      <td>The apartment is less than one block from beau...</td>\n",
       "      <td>https://a0.muscache.com/pictures/acf6b3c0-47f2...</td>\n",
       "      <td>2613</td>\n",
       "      <td>https://www.airbnb.com/users/show/2613</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R17000015609</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4505</td>\n",
       "      <td>https://www.airbnb.com/rooms/4505</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>394 Great Reviews. 127 y/o House. 40 yds to tr...</td>\n",
       "      <td>We have been closed for quite a while and will...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://a0.muscache.com/pictures/10628083/3543...</td>\n",
       "      <td>5775</td>\n",
       "      <td>https://www.airbnb.com/users/show/5775</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>R19000037538</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7126</td>\n",
       "      <td>https://www.airbnb.com/rooms/7126</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>Tiny Studio Apartment 94 Walk Score</td>\n",
       "      <td>A very small studio in a wonderful neighborhoo...</td>\n",
       "      <td>Ukrainian Village was just named \"Hottest Neig...</td>\n",
       "      <td>https://a0.muscache.com/pictures/51073/16c81c7...</td>\n",
       "      <td>17928</td>\n",
       "      <td>https://www.airbnb.com/users/show/17928</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R18000034991</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9811</td>\n",
       "      <td>https://www.airbnb.com/rooms/9811</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>Barbara's Hideaway - Old Town</td>\n",
       "      <td>One-bedroom hideaway tucked into Old Town step...</td>\n",
       "      <td>Chicagoâ€™s Old Town neighborhood is squeezed be...</td>\n",
       "      <td>https://a0.muscache.com/pictures/37df1935-855c...</td>\n",
       "      <td>33004</td>\n",
       "      <td>https://www.airbnb.com/users/show/33004</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2079260</td>\n",
       "      <td>f</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10945</td>\n",
       "      <td>https://www.airbnb.com/rooms/10945</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>The Biddle House (#1)</td>\n",
       "      <td>Beautiful first floor apartment in Historic Ol...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://a0.muscache.com/pictures/58d1a420-a24b...</td>\n",
       "      <td>33004</td>\n",
       "      <td>https://www.airbnb.com/users/show/33004</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2120297</td>\n",
       "      <td>t</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6367</th>\n",
       "      <td>48199082</td>\n",
       "      <td>https://www.airbnb.com/rooms/48199082</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...</td>\n",
       "      <td>You could spend your entire stay here checking...</td>\n",
       "      <td>We are just about:&lt;br /&gt;&lt;br /&gt;* 15-20 minutes ...</td>\n",
       "      <td>https://a0.muscache.com/pictures/2465bd35-4f93...</td>\n",
       "      <td>211029191</td>\n",
       "      <td>https://www.airbnb.com/users/show/211029191</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6368</th>\n",
       "      <td>48199156</td>\n",
       "      <td>https://www.airbnb.com/rooms/48199156</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>Stunning and spacious apt on Southport</td>\n",
       "      <td>This is an amazing, clean and stunning one bed...</td>\n",
       "      <td>Very close to Clark St where you will be able ...</td>\n",
       "      <td>https://a0.muscache.com/pictures/3e3e26a3-0374...</td>\n",
       "      <td>378245394</td>\n",
       "      <td>https://www.airbnb.com/users/show/378245394</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Are-1234567</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6369</th>\n",
       "      <td>48199227</td>\n",
       "      <td>https://www.airbnb.com/rooms/48199227</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>BR with PRIVATE OFFICE in Old Irving Pk / Avon...</td>\n",
       "      <td>This 1920's brick city apt oozes Chicago style...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://a0.muscache.com/pictures/miso/Hosting-...</td>\n",
       "      <td>31378386</td>\n",
       "      <td>https://www.airbnb.com/users/show/31378386</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R21000060523</td>\n",
       "      <td>t</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6370</th>\n",
       "      <td>48201067</td>\n",
       "      <td>https://www.airbnb.com/rooms/48201067</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>Cosy loft</td>\n",
       "      <td>Welcome to our stunning loft at Logan square. ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>https://a0.muscache.com/pictures/00edd2dd-e2d7...</td>\n",
       "      <td>75724040</td>\n",
       "      <td>https://www.airbnb.com/users/show/75724040</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6371</th>\n",
       "      <td>48202487</td>\n",
       "      <td>https://www.airbnb.com/rooms/48202487</td>\n",
       "      <td>2.020000e+13</td>\n",
       "      <td>2/19/21</td>\n",
       "      <td>Beautiful convertible in downtown Chicago</td>\n",
       "      <td>My apartment is right in the heart of the city...</td>\n",
       "      <td>This is a very safe neighborhood - centrally l...</td>\n",
       "      <td>https://a0.muscache.com/pictures/b2e920c5-190f...</td>\n",
       "      <td>388904253</td>\n",
       "      <td>https://www.airbnb.com/users/show/388904253</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6372 rows Ã— 74 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                            listing_url     scrape_id  \\\n",
       "0         2384      https://www.airbnb.com/rooms/2384  2.020000e+13   \n",
       "1         4505      https://www.airbnb.com/rooms/4505  2.020000e+13   \n",
       "2         7126      https://www.airbnb.com/rooms/7126  2.020000e+13   \n",
       "3         9811      https://www.airbnb.com/rooms/9811  2.020000e+13   \n",
       "4        10945     https://www.airbnb.com/rooms/10945  2.020000e+13   \n",
       "...        ...                                    ...           ...   \n",
       "6367  48199082  https://www.airbnb.com/rooms/48199082  2.020000e+13   \n",
       "6368  48199156  https://www.airbnb.com/rooms/48199156  2.020000e+13   \n",
       "6369  48199227  https://www.airbnb.com/rooms/48199227  2.020000e+13   \n",
       "6370  48201067  https://www.airbnb.com/rooms/48201067  2.020000e+13   \n",
       "6371  48202487  https://www.airbnb.com/rooms/48202487  2.020000e+13   \n",
       "\n",
       "     last_scraped                                               name  \\\n",
       "0         2/19/21  Hyde Park - Walk to UChicago, 10 min to McCormick   \n",
       "1         2/19/21  394 Great Reviews. 127 y/o House. 40 yds to tr...   \n",
       "2         2/19/21                Tiny Studio Apartment 94 Walk Score   \n",
       "3         2/19/21                      Barbara's Hideaway - Old Town   \n",
       "4         2/19/21                              The Biddle House (#1)   \n",
       "...           ...                                                ...   \n",
       "6367      2/19/21  PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...   \n",
       "6368      2/19/21             Stunning and spacious apt on Southport   \n",
       "6369      2/19/21  BR with PRIVATE OFFICE in Old Irving Pk / Avon...   \n",
       "6370      2/19/21                                          Cosy loft   \n",
       "6371      2/19/21          Beautiful convertible in downtown Chicago   \n",
       "\n",
       "                                            description  \\\n",
       "0     Visiting The University of Chicago or attendin...   \n",
       "1     We have been closed for quite a while and will...   \n",
       "2     A very small studio in a wonderful neighborhoo...   \n",
       "3     One-bedroom hideaway tucked into Old Town step...   \n",
       "4     Beautiful first floor apartment in Historic Ol...   \n",
       "...                                                 ...   \n",
       "6367  You could spend your entire stay here checking...   \n",
       "6368  This is an amazing, clean and stunning one bed...   \n",
       "6369  This 1920's brick city apt oozes Chicago style...   \n",
       "6370  Welcome to our stunning loft at Logan square. ...   \n",
       "6371  My apartment is right in the heart of the city...   \n",
       "\n",
       "                                  neighborhood_overview  \\\n",
       "0     The apartment is less than one block from beau...   \n",
       "1                                                   NaN   \n",
       "2     Ukrainian Village was just named \"Hottest Neig...   \n",
       "3     Chicagoâ€™s Old Town neighborhood is squeezed be...   \n",
       "4                                                   NaN   \n",
       "...                                                 ...   \n",
       "6367  We are just about:<br /><br />* 15-20 minutes ...   \n",
       "6368  Very close to Clark St where you will be able ...   \n",
       "6369                                                NaN   \n",
       "6370                                                NaN   \n",
       "6371  This is a very safe neighborhood - centrally l...   \n",
       "\n",
       "                                            picture_url    host_id  \\\n",
       "0     https://a0.muscache.com/pictures/acf6b3c0-47f2...       2613   \n",
       "1     https://a0.muscache.com/pictures/10628083/3543...       5775   \n",
       "2     https://a0.muscache.com/pictures/51073/16c81c7...      17928   \n",
       "3     https://a0.muscache.com/pictures/37df1935-855c...      33004   \n",
       "4     https://a0.muscache.com/pictures/58d1a420-a24b...      33004   \n",
       "...                                                 ...        ...   \n",
       "6367  https://a0.muscache.com/pictures/2465bd35-4f93...  211029191   \n",
       "6368  https://a0.muscache.com/pictures/3e3e26a3-0374...  378245394   \n",
       "6369  https://a0.muscache.com/pictures/miso/Hosting-...   31378386   \n",
       "6370  https://a0.muscache.com/pictures/00edd2dd-e2d7...   75724040   \n",
       "6371  https://a0.muscache.com/pictures/b2e920c5-190f...  388904253   \n",
       "\n",
       "                                         host_url  ...  \\\n",
       "0          https://www.airbnb.com/users/show/2613  ...   \n",
       "1          https://www.airbnb.com/users/show/5775  ...   \n",
       "2         https://www.airbnb.com/users/show/17928  ...   \n",
       "3         https://www.airbnb.com/users/show/33004  ...   \n",
       "4         https://www.airbnb.com/users/show/33004  ...   \n",
       "...                                           ...  ...   \n",
       "6367  https://www.airbnb.com/users/show/211029191  ...   \n",
       "6368  https://www.airbnb.com/users/show/378245394  ...   \n",
       "6369   https://www.airbnb.com/users/show/31378386  ...   \n",
       "6370   https://www.airbnb.com/users/show/75724040  ...   \n",
       "6371  https://www.airbnb.com/users/show/388904253  ...   \n",
       "\n",
       "     review_scores_communication review_scores_location review_scores_value  \\\n",
       "0                           10.0                   10.0                10.0   \n",
       "1                           10.0                   10.0                 9.0   \n",
       "2                           10.0                   10.0                10.0   \n",
       "3                            9.0                   10.0                10.0   \n",
       "4                            9.0                   10.0                 9.0   \n",
       "...                          ...                    ...                 ...   \n",
       "6367                         NaN                    NaN                 NaN   \n",
       "6368                         NaN                    NaN                 NaN   \n",
       "6369                         NaN                    NaN                 NaN   \n",
       "6370                         NaN                    NaN                 NaN   \n",
       "6371                         NaN                    NaN                 NaN   \n",
       "\n",
       "                        license instant_bookable  \\\n",
       "0                  R17000015609                f   \n",
       "1                  R19000037538                t   \n",
       "2                  R18000034991                f   \n",
       "3                       2079260                f   \n",
       "4                       2120297                t   \n",
       "...                         ...              ...   \n",
       "6367  City registration pending                t   \n",
       "6368                Are-1234567                f   \n",
       "6369               R21000060523                t   \n",
       "6370  City registration pending                t   \n",
       "6371  City registration pending                t   \n",
       "\n",
       "      calculated_host_listings_count  \\\n",
       "0                                  1   \n",
       "1                                  1   \n",
       "2                                  1   \n",
       "3                                 11   \n",
       "4                                 11   \n",
       "...                              ...   \n",
       "6367                               5   \n",
       "6368                               1   \n",
       "6369                              10   \n",
       "6370                               2   \n",
       "6371                               1   \n",
       "\n",
       "     calculated_host_listings_count_entire_homes  \\\n",
       "0                                              0   \n",
       "1                                              1   \n",
       "2                                              1   \n",
       "3                                             11   \n",
       "4                                             11   \n",
       "...                                          ...   \n",
       "6367                                           0   \n",
       "6368                                           1   \n",
       "6369                                           1   \n",
       "6370                                           2   \n",
       "6371                                           1   \n",
       "\n",
       "     calculated_host_listings_count_private_rooms  \\\n",
       "0                                               1   \n",
       "1                                               0   \n",
       "2                                               0   \n",
       "3                                               0   \n",
       "4                                               0   \n",
       "...                                           ...   \n",
       "6367                                            5   \n",
       "6368                                            0   \n",
       "6369                                            9   \n",
       "6370                                            0   \n",
       "6371                                            0   \n",
       "\n",
       "     calculated_host_listings_count_shared_rooms reviews_per_month  \n",
       "0                                              0              2.43  \n",
       "1                                              0              2.71  \n",
       "2                                              0              2.75  \n",
       "3                                              0              0.65  \n",
       "4                                              0              0.25  \n",
       "...                                          ...               ...  \n",
       "6367                                           0               NaN  \n",
       "6368                                           0               NaN  \n",
       "6369                                           0               NaN  \n",
       "6370                                           0               NaN  \n",
       "6371                                           0               NaN  \n",
       "\n",
       "[6372 rows x 74 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#listing1=listing.drop(['listing_url', 'scrape_id', 'last_scraped', 'description', 'neighborhood_overview','host_id', 'host_url', 'listing_url'] , axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>picture_url</th>\n",
       "      <th>host_name</th>\n",
       "      <th>host_since</th>\n",
       "      <th>host_location</th>\n",
       "      <th>host_about</th>\n",
       "      <th>host_response_time</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_acceptance_rate</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2384</td>\n",
       "      <td>Hyde Park - Walk to UChicago, 10 min to McCormick</td>\n",
       "      <td>https://a0.muscache.com/pictures/acf6b3c0-47f2...</td>\n",
       "      <td>Rebecca</td>\n",
       "      <td>8/29/08</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>My 2 bdrm apartment is a 2nd floor walk-up in ...</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>100%</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R17000015609</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4505</td>\n",
       "      <td>394 Great Reviews. 127 y/o House. 40 yds to tr...</td>\n",
       "      <td>https://a0.muscache.com/pictures/10628083/3543...</td>\n",
       "      <td>Craig &amp; Kathleen</td>\n",
       "      <td>12/29/08</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>Incredibly creative(Kathleen) and stunningly a...</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>88%</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>R19000037538</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7126</td>\n",
       "      <td>Tiny Studio Apartment 94 Walk Score</td>\n",
       "      <td>https://a0.muscache.com/pictures/51073/16c81c7...</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>5/19/09</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>We live in Chicago. We love to travel and see ...</td>\n",
       "      <td>within a few hours</td>\n",
       "      <td>90%</td>\n",
       "      <td>93%</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R18000034991</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9811</td>\n",
       "      <td>Barbara's Hideaway - Old Town</td>\n",
       "      <td>https://a0.muscache.com/pictures/37df1935-855c...</td>\n",
       "      <td>At Home Inn</td>\n",
       "      <td>8/21/09</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>Hi, we're Bob and Liz Biddle, long time Chicag...</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>97%</td>\n",
       "      <td>96%</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2079260</td>\n",
       "      <td>f</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10945</td>\n",
       "      <td>The Biddle House (#1)</td>\n",
       "      <td>https://a0.muscache.com/pictures/58d1a420-a24b...</td>\n",
       "      <td>At Home Inn</td>\n",
       "      <td>8/21/09</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>Hi, we're Bob and Liz Biddle, long time Chicag...</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>97%</td>\n",
       "      <td>96%</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2120297</td>\n",
       "      <td>t</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6367</th>\n",
       "      <td>48199082</td>\n",
       "      <td>PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...</td>\n",
       "      <td>https://a0.muscache.com/pictures/2465bd35-4f93...</td>\n",
       "      <td>Daniel</td>\n",
       "      <td>8/21/18</td>\n",
       "      <td>US</td>\n",
       "      <td>NaN</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>98%</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6368</th>\n",
       "      <td>48199156</td>\n",
       "      <td>Stunning and spacious apt on Southport</td>\n",
       "      <td>https://a0.muscache.com/pictures/3e3e26a3-0374...</td>\n",
       "      <td>Andrea</td>\n",
       "      <td>12/4/20</td>\n",
       "      <td>US</td>\n",
       "      <td>NaN</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>100%</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Are-1234567</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6369</th>\n",
       "      <td>48199227</td>\n",
       "      <td>BR with PRIVATE OFFICE in Old Irving Pk / Avon...</td>\n",
       "      <td>https://a0.muscache.com/pictures/miso/Hosting-...</td>\n",
       "      <td>Proper Stays</td>\n",
       "      <td>4/17/15</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>As a Super Host their glowing reviews are many...</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>100%</td>\n",
       "      <td>68%</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R21000060523</td>\n",
       "      <td>t</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6370</th>\n",
       "      <td>48201067</td>\n",
       "      <td>Cosy loft</td>\n",
       "      <td>https://a0.muscache.com/pictures/00edd2dd-e2d7...</td>\n",
       "      <td>Aiste</td>\n",
       "      <td>6/4/16</td>\n",
       "      <td>Niles, Illinois, United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>within an hour</td>\n",
       "      <td>95%</td>\n",
       "      <td>100%</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6371</th>\n",
       "      <td>48202487</td>\n",
       "      <td>Beautiful convertible in downtown Chicago</td>\n",
       "      <td>https://a0.muscache.com/pictures/b2e920c5-190f...</td>\n",
       "      <td>Arpita</td>\n",
       "      <td>2/17/21</td>\n",
       "      <td>US</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6372 rows Ã— 67 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                                               name  \\\n",
       "0         2384  Hyde Park - Walk to UChicago, 10 min to McCormick   \n",
       "1         4505  394 Great Reviews. 127 y/o House. 40 yds to tr...   \n",
       "2         7126                Tiny Studio Apartment 94 Walk Score   \n",
       "3         9811                      Barbara's Hideaway - Old Town   \n",
       "4        10945                              The Biddle House (#1)   \n",
       "...        ...                                                ...   \n",
       "6367  48199082  PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...   \n",
       "6368  48199156             Stunning and spacious apt on Southport   \n",
       "6369  48199227  BR with PRIVATE OFFICE in Old Irving Pk / Avon...   \n",
       "6370  48201067                                          Cosy loft   \n",
       "6371  48202487          Beautiful convertible in downtown Chicago   \n",
       "\n",
       "                                            picture_url         host_name  \\\n",
       "0     https://a0.muscache.com/pictures/acf6b3c0-47f2...           Rebecca   \n",
       "1     https://a0.muscache.com/pictures/10628083/3543...  Craig & Kathleen   \n",
       "2     https://a0.muscache.com/pictures/51073/16c81c7...             Sarah   \n",
       "3     https://a0.muscache.com/pictures/37df1935-855c...       At Home Inn   \n",
       "4     https://a0.muscache.com/pictures/58d1a420-a24b...       At Home Inn   \n",
       "...                                                 ...               ...   \n",
       "6367  https://a0.muscache.com/pictures/2465bd35-4f93...            Daniel   \n",
       "6368  https://a0.muscache.com/pictures/3e3e26a3-0374...            Andrea   \n",
       "6369  https://a0.muscache.com/pictures/miso/Hosting-...      Proper Stays   \n",
       "6370  https://a0.muscache.com/pictures/00edd2dd-e2d7...             Aiste   \n",
       "6371  https://a0.muscache.com/pictures/b2e920c5-190f...            Arpita   \n",
       "\n",
       "     host_since                     host_location  \\\n",
       "0       8/29/08  Chicago, Illinois, United States   \n",
       "1      12/29/08  Chicago, Illinois, United States   \n",
       "2       5/19/09  Chicago, Illinois, United States   \n",
       "3       8/21/09  Chicago, Illinois, United States   \n",
       "4       8/21/09  Chicago, Illinois, United States   \n",
       "...         ...                               ...   \n",
       "6367    8/21/18                                US   \n",
       "6368    12/4/20                                US   \n",
       "6369    4/17/15  Chicago, Illinois, United States   \n",
       "6370     6/4/16    Niles, Illinois, United States   \n",
       "6371    2/17/21                                US   \n",
       "\n",
       "                                             host_about  host_response_time  \\\n",
       "0     My 2 bdrm apartment is a 2nd floor walk-up in ...      within an hour   \n",
       "1     Incredibly creative(Kathleen) and stunningly a...      within an hour   \n",
       "2     We live in Chicago. We love to travel and see ...  within a few hours   \n",
       "3     Hi, we're Bob and Liz Biddle, long time Chicag...      within an hour   \n",
       "4     Hi, we're Bob and Liz Biddle, long time Chicag...      within an hour   \n",
       "...                                                 ...                 ...   \n",
       "6367                                                NaN      within an hour   \n",
       "6368                                                NaN      within an hour   \n",
       "6369  As a Super Host their glowing reviews are many...      within an hour   \n",
       "6370                                                NaN      within an hour   \n",
       "6371                                                NaN                 NaN   \n",
       "\n",
       "     host_response_rate host_acceptance_rate  ... review_scores_communication  \\\n",
       "0                  100%                 100%  ...                        10.0   \n",
       "1                  100%                  88%  ...                        10.0   \n",
       "2                   90%                  93%  ...                        10.0   \n",
       "3                   97%                  96%  ...                         9.0   \n",
       "4                   97%                  96%  ...                         9.0   \n",
       "...                 ...                  ...  ...                         ...   \n",
       "6367               100%                  98%  ...                         NaN   \n",
       "6368               100%                 100%  ...                         NaN   \n",
       "6369               100%                  68%  ...                         NaN   \n",
       "6370                95%                 100%  ...                         NaN   \n",
       "6371                NaN                  NaN  ...                         NaN   \n",
       "\n",
       "     review_scores_location review_scores_value                    license  \\\n",
       "0                      10.0                10.0               R17000015609   \n",
       "1                      10.0                 9.0               R19000037538   \n",
       "2                      10.0                10.0               R18000034991   \n",
       "3                      10.0                10.0                    2079260   \n",
       "4                      10.0                 9.0                    2120297   \n",
       "...                     ...                 ...                        ...   \n",
       "6367                    NaN                 NaN  City registration pending   \n",
       "6368                    NaN                 NaN                Are-1234567   \n",
       "6369                    NaN                 NaN               R21000060523   \n",
       "6370                    NaN                 NaN  City registration pending   \n",
       "6371                    NaN                 NaN  City registration pending   \n",
       "\n",
       "      instant_bookable  calculated_host_listings_count  \\\n",
       "0                    f                               1   \n",
       "1                    t                               1   \n",
       "2                    f                               1   \n",
       "3                    f                              11   \n",
       "4                    t                              11   \n",
       "...                ...                             ...   \n",
       "6367                 t                               5   \n",
       "6368                 f                               1   \n",
       "6369                 t                              10   \n",
       "6370                 t                               2   \n",
       "6371                 t                               1   \n",
       "\n",
       "     calculated_host_listings_count_entire_homes  \\\n",
       "0                                              0   \n",
       "1                                              1   \n",
       "2                                              1   \n",
       "3                                             11   \n",
       "4                                             11   \n",
       "...                                          ...   \n",
       "6367                                           0   \n",
       "6368                                           1   \n",
       "6369                                           1   \n",
       "6370                                           2   \n",
       "6371                                           1   \n",
       "\n",
       "     calculated_host_listings_count_private_rooms  \\\n",
       "0                                               1   \n",
       "1                                               0   \n",
       "2                                               0   \n",
       "3                                               0   \n",
       "4                                               0   \n",
       "...                                           ...   \n",
       "6367                                            5   \n",
       "6368                                            0   \n",
       "6369                                            9   \n",
       "6370                                            0   \n",
       "6371                                            0   \n",
       "\n",
       "     calculated_host_listings_count_shared_rooms reviews_per_month  \n",
       "0                                              0              2.43  \n",
       "1                                              0              2.71  \n",
       "2                                              0              2.75  \n",
       "3                                              0              0.65  \n",
       "4                                              0              0.25  \n",
       "...                                          ...               ...  \n",
       "6367                                           0               NaN  \n",
       "6368                                           0               NaN  \n",
       "6369                                           0               NaN  \n",
       "6370                                           0               NaN  \n",
       "6371                                           0               NaN  \n",
       "\n",
       "[6372 rows x 67 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#listing1=listing1.drop(['host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_acceptance_rate', 'host_name', 'host_since', 'host_location', 'host_about', 'host_response_time', 'host_acceptance_rate','neighbourhood_group_cleansed', 'latitude', 'longitude', 'bathrooms', 'minimum_minimum_nights', 'maximum_minimum_nights', 'minimum_maximum_nights', 'maximum_maximum_nights', 'minimum_nights_avg_ntm', 'maximum_nights_avg_ntm', 'calendar_updated', 'calendar_last_scraped'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>picture_url</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_thumbnail_url</th>\n",
       "      <th>host_picture_url</th>\n",
       "      <th>host_neighbourhood</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2384</td>\n",
       "      <td>Hyde Park - Walk to UChicago, 10 min to McCormick</td>\n",
       "      <td>https://a0.muscache.com/pictures/acf6b3c0-47f2...</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/8bb47...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/8bb47...</td>\n",
       "      <td>Hyde Park</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R17000015609</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4505</td>\n",
       "      <td>394 Great Reviews. 127 y/o House. 40 yds to tr...</td>\n",
       "      <td>https://a0.muscache.com/pictures/10628083/3543...</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>https://a0.muscache.com/im/users/5775/profile_...</td>\n",
       "      <td>https://a0.muscache.com/im/users/5775/profile_...</td>\n",
       "      <td>Little Village</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>R19000037538</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7126</td>\n",
       "      <td>Tiny Studio Apartment 94 Walk Score</td>\n",
       "      <td>https://a0.muscache.com/pictures/51073/16c81c7...</td>\n",
       "      <td>90%</td>\n",
       "      <td>t</td>\n",
       "      <td>https://a0.muscache.com/im/users/17928/profile...</td>\n",
       "      <td>https://a0.muscache.com/im/users/17928/profile...</td>\n",
       "      <td>Ukrainian Village</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R18000034991</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9811</td>\n",
       "      <td>Barbara's Hideaway - Old Town</td>\n",
       "      <td>https://a0.muscache.com/pictures/37df1935-855c...</td>\n",
       "      <td>97%</td>\n",
       "      <td>t</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/e23d4...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/e23d4...</td>\n",
       "      <td>Old Town</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2079260</td>\n",
       "      <td>f</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10945</td>\n",
       "      <td>The Biddle House (#1)</td>\n",
       "      <td>https://a0.muscache.com/pictures/58d1a420-a24b...</td>\n",
       "      <td>97%</td>\n",
       "      <td>t</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/e23d4...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/e23d4...</td>\n",
       "      <td>Old Town</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2120297</td>\n",
       "      <td>t</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6367</th>\n",
       "      <td>48199082</td>\n",
       "      <td>PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...</td>\n",
       "      <td>https://a0.muscache.com/pictures/2465bd35-4f93...</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/27c97...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/27c97...</td>\n",
       "      <td>Irving Park</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6368</th>\n",
       "      <td>48199156</td>\n",
       "      <td>Stunning and spacious apt on Southport</td>\n",
       "      <td>https://a0.muscache.com/pictures/3e3e26a3-0374...</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/53e7d...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/53e7d...</td>\n",
       "      <td>Lake View</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Are-1234567</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6369</th>\n",
       "      <td>48199227</td>\n",
       "      <td>BR with PRIVATE OFFICE in Old Irving Pk / Avon...</td>\n",
       "      <td>https://a0.muscache.com/pictures/miso/Hosting-...</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/cb2b9...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/cb2b9...</td>\n",
       "      <td>Irving Park</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R21000060523</td>\n",
       "      <td>t</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6370</th>\n",
       "      <td>48201067</td>\n",
       "      <td>Cosy loft</td>\n",
       "      <td>https://a0.muscache.com/pictures/00edd2dd-e2d7...</td>\n",
       "      <td>95%</td>\n",
       "      <td>f</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/23739...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/23739...</td>\n",
       "      <td>Roseland</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6371</th>\n",
       "      <td>48202487</td>\n",
       "      <td>Beautiful convertible in downtown Chicago</td>\n",
       "      <td>https://a0.muscache.com/pictures/b2e920c5-190f...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/b9cc5...</td>\n",
       "      <td>https://a0.muscache.com/im/pictures/user/b9cc5...</td>\n",
       "      <td>Chicago Loop</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6372 rows Ã— 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                                               name  \\\n",
       "0         2384  Hyde Park - Walk to UChicago, 10 min to McCormick   \n",
       "1         4505  394 Great Reviews. 127 y/o House. 40 yds to tr...   \n",
       "2         7126                Tiny Studio Apartment 94 Walk Score   \n",
       "3         9811                      Barbara's Hideaway - Old Town   \n",
       "4        10945                              The Biddle House (#1)   \n",
       "...        ...                                                ...   \n",
       "6367  48199082  PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...   \n",
       "6368  48199156             Stunning and spacious apt on Southport   \n",
       "6369  48199227  BR with PRIVATE OFFICE in Old Irving Pk / Avon...   \n",
       "6370  48201067                                          Cosy loft   \n",
       "6371  48202487          Beautiful convertible in downtown Chicago   \n",
       "\n",
       "                                            picture_url host_response_rate  \\\n",
       "0     https://a0.muscache.com/pictures/acf6b3c0-47f2...               100%   \n",
       "1     https://a0.muscache.com/pictures/10628083/3543...               100%   \n",
       "2     https://a0.muscache.com/pictures/51073/16c81c7...                90%   \n",
       "3     https://a0.muscache.com/pictures/37df1935-855c...                97%   \n",
       "4     https://a0.muscache.com/pictures/58d1a420-a24b...                97%   \n",
       "...                                                 ...                ...   \n",
       "6367  https://a0.muscache.com/pictures/2465bd35-4f93...               100%   \n",
       "6368  https://a0.muscache.com/pictures/3e3e26a3-0374...               100%   \n",
       "6369  https://a0.muscache.com/pictures/miso/Hosting-...               100%   \n",
       "6370  https://a0.muscache.com/pictures/00edd2dd-e2d7...                95%   \n",
       "6371  https://a0.muscache.com/pictures/b2e920c5-190f...                NaN   \n",
       "\n",
       "     host_is_superhost                                 host_thumbnail_url  \\\n",
       "0                    t  https://a0.muscache.com/im/pictures/user/8bb47...   \n",
       "1                    t  https://a0.muscache.com/im/users/5775/profile_...   \n",
       "2                    t  https://a0.muscache.com/im/users/17928/profile...   \n",
       "3                    t  https://a0.muscache.com/im/pictures/user/e23d4...   \n",
       "4                    t  https://a0.muscache.com/im/pictures/user/e23d4...   \n",
       "...                ...                                                ...   \n",
       "6367                 f  https://a0.muscache.com/im/pictures/user/27c97...   \n",
       "6368                 f  https://a0.muscache.com/im/pictures/user/53e7d...   \n",
       "6369                 t  https://a0.muscache.com/im/pictures/user/cb2b9...   \n",
       "6370                 f  https://a0.muscache.com/im/pictures/user/23739...   \n",
       "6371                 f  https://a0.muscache.com/im/pictures/user/b9cc5...   \n",
       "\n",
       "                                       host_picture_url host_neighbourhood  \\\n",
       "0     https://a0.muscache.com/im/pictures/user/8bb47...          Hyde Park   \n",
       "1     https://a0.muscache.com/im/users/5775/profile_...     Little Village   \n",
       "2     https://a0.muscache.com/im/users/17928/profile...  Ukrainian Village   \n",
       "3     https://a0.muscache.com/im/pictures/user/e23d4...           Old Town   \n",
       "4     https://a0.muscache.com/im/pictures/user/e23d4...           Old Town   \n",
       "...                                                 ...                ...   \n",
       "6367  https://a0.muscache.com/im/pictures/user/27c97...        Irving Park   \n",
       "6368  https://a0.muscache.com/im/pictures/user/53e7d...          Lake View   \n",
       "6369  https://a0.muscache.com/im/pictures/user/cb2b9...        Irving Park   \n",
       "6370  https://a0.muscache.com/im/pictures/user/23739...           Roseland   \n",
       "6371  https://a0.muscache.com/im/pictures/user/b9cc5...       Chicago Loop   \n",
       "\n",
       "      host_listings_count  host_total_listings_count  ...  \\\n",
       "0                     1.0                        1.0  ...   \n",
       "1                     1.0                        1.0  ...   \n",
       "2                     2.0                        2.0  ...   \n",
       "3                    10.0                       10.0  ...   \n",
       "4                    10.0                       10.0  ...   \n",
       "...                   ...                        ...  ...   \n",
       "6367                  4.0                        4.0  ...   \n",
       "6368                  1.0                        1.0  ...   \n",
       "6369                  8.0                        8.0  ...   \n",
       "6370                  0.0                        0.0  ...   \n",
       "6371                  0.0                        0.0  ...   \n",
       "\n",
       "     review_scores_communication review_scores_location review_scores_value  \\\n",
       "0                           10.0                   10.0                10.0   \n",
       "1                           10.0                   10.0                 9.0   \n",
       "2                           10.0                   10.0                10.0   \n",
       "3                            9.0                   10.0                10.0   \n",
       "4                            9.0                   10.0                 9.0   \n",
       "...                          ...                    ...                 ...   \n",
       "6367                         NaN                    NaN                 NaN   \n",
       "6368                         NaN                    NaN                 NaN   \n",
       "6369                         NaN                    NaN                 NaN   \n",
       "6370                         NaN                    NaN                 NaN   \n",
       "6371                         NaN                    NaN                 NaN   \n",
       "\n",
       "                        license instant_bookable  \\\n",
       "0                  R17000015609                f   \n",
       "1                  R19000037538                t   \n",
       "2                  R18000034991                f   \n",
       "3                       2079260                f   \n",
       "4                       2120297                t   \n",
       "...                         ...              ...   \n",
       "6367  City registration pending                t   \n",
       "6368                Are-1234567                f   \n",
       "6369               R21000060523                t   \n",
       "6370  City registration pending                t   \n",
       "6371  City registration pending                t   \n",
       "\n",
       "     calculated_host_listings_count  \\\n",
       "0                                 1   \n",
       "1                                 1   \n",
       "2                                 1   \n",
       "3                                11   \n",
       "4                                11   \n",
       "...                             ...   \n",
       "6367                              5   \n",
       "6368                              1   \n",
       "6369                             10   \n",
       "6370                              2   \n",
       "6371                              1   \n",
       "\n",
       "     calculated_host_listings_count_entire_homes  \\\n",
       "0                                              0   \n",
       "1                                              1   \n",
       "2                                              1   \n",
       "3                                             11   \n",
       "4                                             11   \n",
       "...                                          ...   \n",
       "6367                                           0   \n",
       "6368                                           1   \n",
       "6369                                           1   \n",
       "6370                                           2   \n",
       "6371                                           1   \n",
       "\n",
       "      calculated_host_listings_count_private_rooms  \\\n",
       "0                                                1   \n",
       "1                                                0   \n",
       "2                                                0   \n",
       "3                                                0   \n",
       "4                                                0   \n",
       "...                                            ...   \n",
       "6367                                             5   \n",
       "6368                                             0   \n",
       "6369                                             9   \n",
       "6370                                             0   \n",
       "6371                                             0   \n",
       "\n",
       "     calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "0                                              0               2.43  \n",
       "1                                              0               2.71  \n",
       "2                                              0               2.75  \n",
       "3                                              0               0.65  \n",
       "4                                              0               0.25  \n",
       "...                                          ...                ...  \n",
       "6367                                           0                NaN  \n",
       "6368                                           0                NaN  \n",
       "6369                                           0                NaN  \n",
       "6370                                           0                NaN  \n",
       "6371                                           0                NaN  \n",
       "\n",
       "[6372 rows x 49 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#listing1=listing1.drop(['picture_url', 'host_thumbnail_url', 'host_picture_url' , 'host_neighbourhood' ],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>host_verifications</th>\n",
       "      <th>host_has_profile_pic</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2384</td>\n",
       "      <td>Hyde Park - Walk to UChicago, 10 min to McCormick</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'manual_offline'...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R17000015609</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4505</td>\n",
       "      <td>394 Great Reviews. 127 y/o House. 40 yds to tr...</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'kba']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>R19000037538</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7126</td>\n",
       "      <td>Tiny Studio Apartment 94 Walk Score</td>\n",
       "      <td>90%</td>\n",
       "      <td>t</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'offlin...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R18000034991</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9811</td>\n",
       "      <td>Barbara's Hideaway - Old Town</td>\n",
       "      <td>97%</td>\n",
       "      <td>t</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'govern...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2079260</td>\n",
       "      <td>f</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10945</td>\n",
       "      <td>The Biddle House (#1)</td>\n",
       "      <td>97%</td>\n",
       "      <td>t</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'govern...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2120297</td>\n",
       "      <td>t</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6367</th>\n",
       "      <td>48199082</td>\n",
       "      <td>PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6368</th>\n",
       "      <td>48199156</td>\n",
       "      <td>Stunning and spacious apt on Southport</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Are-1234567</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6369</th>\n",
       "      <td>48199227</td>\n",
       "      <td>BR with PRIVATE OFFICE in Old Irving Pk / Avon...</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>['email', 'phone', 'google', 'reviews', 'offli...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R21000060523</td>\n",
       "      <td>t</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6370</th>\n",
       "      <td>48201067</td>\n",
       "      <td>Cosy loft</td>\n",
       "      <td>95%</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6371</th>\n",
       "      <td>48202487</td>\n",
       "      <td>Beautiful convertible in downtown Chicago</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>['email', 'phone']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6372 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                                               name  \\\n",
       "0         2384  Hyde Park - Walk to UChicago, 10 min to McCormick   \n",
       "1         4505  394 Great Reviews. 127 y/o House. 40 yds to tr...   \n",
       "2         7126                Tiny Studio Apartment 94 Walk Score   \n",
       "3         9811                      Barbara's Hideaway - Old Town   \n",
       "4        10945                              The Biddle House (#1)   \n",
       "...        ...                                                ...   \n",
       "6367  48199082  PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...   \n",
       "6368  48199156             Stunning and spacious apt on Southport   \n",
       "6369  48199227  BR with PRIVATE OFFICE in Old Irving Pk / Avon...   \n",
       "6370  48201067                                          Cosy loft   \n",
       "6371  48202487          Beautiful convertible in downtown Chicago   \n",
       "\n",
       "     host_response_rate host_is_superhost  host_listings_count  \\\n",
       "0                  100%                 t                  1.0   \n",
       "1                  100%                 t                  1.0   \n",
       "2                   90%                 t                  2.0   \n",
       "3                   97%                 t                 10.0   \n",
       "4                   97%                 t                 10.0   \n",
       "...                 ...               ...                  ...   \n",
       "6367               100%                 f                  4.0   \n",
       "6368               100%                 f                  1.0   \n",
       "6369               100%                 t                  8.0   \n",
       "6370                95%                 f                  0.0   \n",
       "6371                NaN                 f                  0.0   \n",
       "\n",
       "      host_total_listings_count  \\\n",
       "0                           1.0   \n",
       "1                           1.0   \n",
       "2                           2.0   \n",
       "3                          10.0   \n",
       "4                          10.0   \n",
       "...                         ...   \n",
       "6367                        4.0   \n",
       "6368                        1.0   \n",
       "6369                        8.0   \n",
       "6370                        0.0   \n",
       "6371                        0.0   \n",
       "\n",
       "                                     host_verifications host_has_profile_pic  \\\n",
       "0     ['email', 'phone', 'reviews', 'manual_offline'...                    t   \n",
       "1                  ['email', 'phone', 'reviews', 'kba']                    t   \n",
       "2     ['email', 'phone', 'reviews', 'jumio', 'offlin...                    t   \n",
       "3     ['email', 'phone', 'reviews', 'jumio', 'govern...                    t   \n",
       "4     ['email', 'phone', 'reviews', 'jumio', 'govern...                    t   \n",
       "...                                                 ...                  ...   \n",
       "6367  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6368  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6369  ['email', 'phone', 'google', 'reviews', 'offli...                    t   \n",
       "6370  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6371                                 ['email', 'phone']                    t   \n",
       "\n",
       "     host_identity_verified                     neighbourhood  ...  \\\n",
       "0                         t  Chicago, Illinois, United States  ...   \n",
       "1                         t                               NaN  ...   \n",
       "2                         t  Chicago, Illinois, United States  ...   \n",
       "3                         t  Chicago, Illinois, United States  ...   \n",
       "4                         t                               NaN  ...   \n",
       "...                     ...                               ...  ...   \n",
       "6367                      t  Chicago, Illinois, United States  ...   \n",
       "6368                      t  Chicago, Illinois, United States  ...   \n",
       "6369                      t                               NaN  ...   \n",
       "6370                      t                               NaN  ...   \n",
       "6371                      t  Chicago, Illinois, United States  ...   \n",
       "\n",
       "     review_scores_communication review_scores_location review_scores_value  \\\n",
       "0                           10.0                   10.0                10.0   \n",
       "1                           10.0                   10.0                 9.0   \n",
       "2                           10.0                   10.0                10.0   \n",
       "3                            9.0                   10.0                10.0   \n",
       "4                            9.0                   10.0                 9.0   \n",
       "...                          ...                    ...                 ...   \n",
       "6367                         NaN                    NaN                 NaN   \n",
       "6368                         NaN                    NaN                 NaN   \n",
       "6369                         NaN                    NaN                 NaN   \n",
       "6370                         NaN                    NaN                 NaN   \n",
       "6371                         NaN                    NaN                 NaN   \n",
       "\n",
       "                        license instant_bookable  \\\n",
       "0                  R17000015609                f   \n",
       "1                  R19000037538                t   \n",
       "2                  R18000034991                f   \n",
       "3                       2079260                f   \n",
       "4                       2120297                t   \n",
       "...                         ...              ...   \n",
       "6367  City registration pending                t   \n",
       "6368                Are-1234567                f   \n",
       "6369               R21000060523                t   \n",
       "6370  City registration pending                t   \n",
       "6371  City registration pending                t   \n",
       "\n",
       "      calculated_host_listings_count  \\\n",
       "0                                  1   \n",
       "1                                  1   \n",
       "2                                  1   \n",
       "3                                 11   \n",
       "4                                 11   \n",
       "...                              ...   \n",
       "6367                               5   \n",
       "6368                               1   \n",
       "6369                              10   \n",
       "6370                               2   \n",
       "6371                               1   \n",
       "\n",
       "      calculated_host_listings_count_entire_homes  \\\n",
       "0                                               0   \n",
       "1                                               1   \n",
       "2                                               1   \n",
       "3                                              11   \n",
       "4                                              11   \n",
       "...                                           ...   \n",
       "6367                                            0   \n",
       "6368                                            1   \n",
       "6369                                            1   \n",
       "6370                                            2   \n",
       "6371                                            1   \n",
       "\n",
       "     calculated_host_listings_count_private_rooms  \\\n",
       "0                                               1   \n",
       "1                                               0   \n",
       "2                                               0   \n",
       "3                                               0   \n",
       "4                                               0   \n",
       "...                                           ...   \n",
       "6367                                            5   \n",
       "6368                                            0   \n",
       "6369                                            9   \n",
       "6370                                            0   \n",
       "6371                                            0   \n",
       "\n",
       "     calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "0                                              0               2.43  \n",
       "1                                              0               2.71  \n",
       "2                                              0               2.75  \n",
       "3                                              0               0.65  \n",
       "4                                              0               0.25  \n",
       "...                                          ...                ...  \n",
       "6367                                           0                NaN  \n",
       "6368                                           0                NaN  \n",
       "6369                                           0                NaN  \n",
       "6370                                           0                NaN  \n",
       "6371                                           0                NaN  \n",
       "\n",
       "[6372 rows x 45 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>host_verifications</th>\n",
       "      <th>host_has_profile_pic</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2384</td>\n",
       "      <td>Hyde Park - Walk to UChicago, 10 min to McCormick</td>\n",
       "      <td>1.00</td>\n",
       "      <td>t</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'manual_offline'...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R17000015609</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4505</td>\n",
       "      <td>394 Great Reviews. 127 y/o House. 40 yds to tr...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>t</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'kba']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>R19000037538</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7126</td>\n",
       "      <td>Tiny Studio Apartment 94 Walk Score</td>\n",
       "      <td>0.90</td>\n",
       "      <td>t</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'offlin...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R18000034991</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9811</td>\n",
       "      <td>Barbara's Hideaway - Old Town</td>\n",
       "      <td>0.97</td>\n",
       "      <td>t</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'govern...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2079260</td>\n",
       "      <td>f</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10945</td>\n",
       "      <td>The Biddle House (#1)</td>\n",
       "      <td>0.97</td>\n",
       "      <td>t</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'govern...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2120297</td>\n",
       "      <td>t</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12068</td>\n",
       "      <td>Chicago GOLD COAST 1 Bedroom Condo</td>\n",
       "      <td>0.97</td>\n",
       "      <td>f</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'offline_governm...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>12140</td>\n",
       "      <td>Lincoln Park Guest House</td>\n",
       "      <td>1.00</td>\n",
       "      <td>f</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'facebook', 'reviews', 'kba']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R20000055258</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>22362</td>\n",
       "      <td>Luxury in Chicago! 2BR/ 2Ba / Parking / BBQ</td>\n",
       "      <td>1.00</td>\n",
       "      <td>f</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'kba']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R17000018689</td>\n",
       "      <td>f</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>24833</td>\n",
       "      <td>Private Apt 1 Block to Fullerton L Red Line - ...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>f</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'offlin...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>25879</td>\n",
       "      <td>Top 2/1  Block to Fullerton L Red Line Deck &amp; ...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>f</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'jumio', 'offlin...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      id                                               name  \\\n",
       "0   2384  Hyde Park - Walk to UChicago, 10 min to McCormick   \n",
       "1   4505  394 Great Reviews. 127 y/o House. 40 yds to tr...   \n",
       "2   7126                Tiny Studio Apartment 94 Walk Score   \n",
       "3   9811                      Barbara's Hideaway - Old Town   \n",
       "4  10945                              The Biddle House (#1)   \n",
       "5  12068                 Chicago GOLD COAST 1 Bedroom Condo   \n",
       "6  12140                           Lincoln Park Guest House   \n",
       "7  22362        Luxury in Chicago! 2BR/ 2Ba / Parking / BBQ   \n",
       "8  24833  Private Apt 1 Block to Fullerton L Red Line - ...   \n",
       "9  25879  Top 2/1  Block to Fullerton L Red Line Deck & ...   \n",
       "\n",
       "   host_response_rate host_is_superhost  host_listings_count  \\\n",
       "0                1.00                 t                  1.0   \n",
       "1                1.00                 t                  1.0   \n",
       "2                0.90                 t                  2.0   \n",
       "3                0.97                 t                 10.0   \n",
       "4                0.97                 t                 10.0   \n",
       "5                0.97                 f                  3.0   \n",
       "6                1.00                 f                  1.0   \n",
       "7                1.00                 f                  2.0   \n",
       "8                1.00                 f                  8.0   \n",
       "9                1.00                 f                  8.0   \n",
       "\n",
       "   host_total_listings_count  \\\n",
       "0                        1.0   \n",
       "1                        1.0   \n",
       "2                        2.0   \n",
       "3                       10.0   \n",
       "4                       10.0   \n",
       "5                        3.0   \n",
       "6                        1.0   \n",
       "7                        2.0   \n",
       "8                        8.0   \n",
       "9                        8.0   \n",
       "\n",
       "                                  host_verifications host_has_profile_pic  \\\n",
       "0  ['email', 'phone', 'reviews', 'manual_offline'...                    t   \n",
       "1               ['email', 'phone', 'reviews', 'kba']                    t   \n",
       "2  ['email', 'phone', 'reviews', 'jumio', 'offlin...                    t   \n",
       "3  ['email', 'phone', 'reviews', 'jumio', 'govern...                    t   \n",
       "4  ['email', 'phone', 'reviews', 'jumio', 'govern...                    t   \n",
       "5  ['email', 'phone', 'reviews', 'offline_governm...                    t   \n",
       "6   ['email', 'phone', 'facebook', 'reviews', 'kba']                    t   \n",
       "7               ['email', 'phone', 'reviews', 'kba']                    t   \n",
       "8  ['email', 'phone', 'reviews', 'jumio', 'offlin...                    t   \n",
       "9  ['email', 'phone', 'reviews', 'jumio', 'offlin...                    t   \n",
       "\n",
       "  host_identity_verified                     neighbourhood  ...  \\\n",
       "0                      t  Chicago, Illinois, United States  ...   \n",
       "1                      t                               NaN  ...   \n",
       "2                      t  Chicago, Illinois, United States  ...   \n",
       "3                      t  Chicago, Illinois, United States  ...   \n",
       "4                      t                               NaN  ...   \n",
       "5                      t  Chicago, Illinois, United States  ...   \n",
       "6                      t  Chicago, Illinois, United States  ...   \n",
       "7                      t  Chicago, Illinois, United States  ...   \n",
       "8                      t  Chicago, Illinois, United States  ...   \n",
       "9                      t  Chicago, Illinois, United States  ...   \n",
       "\n",
       "  review_scores_communication review_scores_location review_scores_value  \\\n",
       "0                        10.0                   10.0                10.0   \n",
       "1                        10.0                   10.0                 9.0   \n",
       "2                        10.0                   10.0                10.0   \n",
       "3                         9.0                   10.0                10.0   \n",
       "4                         9.0                   10.0                 9.0   \n",
       "5                         9.0                    9.0                 9.0   \n",
       "6                        10.0                   10.0                10.0   \n",
       "7                        10.0                   10.0                10.0   \n",
       "8                         8.0                   10.0                 8.0   \n",
       "9                         8.0                   10.0                 9.0   \n",
       "\n",
       "                     license instant_bookable  calculated_host_listings_count  \\\n",
       "0               R17000015609                f                               1   \n",
       "1               R19000037538                t                               1   \n",
       "2               R18000034991                f                               1   \n",
       "3                    2079260                f                              11   \n",
       "4                    2120297                t                              11   \n",
       "5  City registration pending                f                               1   \n",
       "6               R20000055258                f                               1   \n",
       "7               R17000018689                f                               2   \n",
       "8  City registration pending                t                               3   \n",
       "9  City registration pending                t                               3   \n",
       "\n",
       "   calculated_host_listings_count_entire_homes  \\\n",
       "0                                            0   \n",
       "1                                            1   \n",
       "2                                            1   \n",
       "3                                           11   \n",
       "4                                           11   \n",
       "5                                            1   \n",
       "6                                            0   \n",
       "7                                            2   \n",
       "8                                            3   \n",
       "9                                            3   \n",
       "\n",
       "  calculated_host_listings_count_private_rooms  \\\n",
       "0                                            1   \n",
       "1                                            0   \n",
       "2                                            0   \n",
       "3                                            0   \n",
       "4                                            0   \n",
       "5                                            0   \n",
       "6                                            1   \n",
       "7                                            0   \n",
       "8                                            0   \n",
       "9                                            0   \n",
       "\n",
       "   calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "0                                            0               2.43  \n",
       "1                                            0               2.71  \n",
       "2                                            0               2.75  \n",
       "3                                            0               0.65  \n",
       "4                                            0               0.25  \n",
       "5                                            0               0.12  \n",
       "6                                            0               0.07  \n",
       "7                                            0               0.10  \n",
       "8                                            0               0.28  \n",
       "9                                            0               0.36  \n",
       "\n",
       "[10 rows x 45 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>host_verifications</th>\n",
       "      <th>host_has_profile_pic</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6362</th>\n",
       "      <td>48186778</td>\n",
       "      <td>Sanitized/Sleeps 12/Free parking/3mi to Downtown</td>\n",
       "      <td>99%</td>\n",
       "      <td>f</td>\n",
       "      <td>23.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>['email', 'phone', 'jumio', 'offline_governmen...</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R19000077835</td>\n",
       "      <td>t</td>\n",
       "      <td>24</td>\n",
       "      <td>4</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6363</th>\n",
       "      <td>48196515</td>\n",
       "      <td>Cute and cozy apt in Boystown</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1233456</td>\n",
       "      <td>t</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6364</th>\n",
       "      <td>48196821</td>\n",
       "      <td>Bright Penthouse 52nd floor Condo!</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>['email', 'phone']</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>f</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6365</th>\n",
       "      <td>48197242</td>\n",
       "      <td>2BR AT MILLENIUM PARK - PROFESSIONALLY CLEANED!</td>\n",
       "      <td>84%</td>\n",
       "      <td>f</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>['email', 'phone', 'reviews', 'kba']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6366</th>\n",
       "      <td>48198799</td>\n",
       "      <td>30 E. Huron #3201 Private Residence</td>\n",
       "      <td>91%</td>\n",
       "      <td>f</td>\n",
       "      <td>17.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>['email', 'phone']</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>f</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6367</th>\n",
       "      <td>48199082</td>\n",
       "      <td>PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6368</th>\n",
       "      <td>48199156</td>\n",
       "      <td>Stunning and spacious apt on Southport</td>\n",
       "      <td>100%</td>\n",
       "      <td>f</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Are-1234567</td>\n",
       "      <td>f</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6369</th>\n",
       "      <td>48199227</td>\n",
       "      <td>BR with PRIVATE OFFICE in Old Irving Pk / Avon...</td>\n",
       "      <td>100%</td>\n",
       "      <td>t</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>['email', 'phone', 'google', 'reviews', 'offli...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R21000060523</td>\n",
       "      <td>t</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6370</th>\n",
       "      <td>48201067</td>\n",
       "      <td>Cosy loft</td>\n",
       "      <td>95%</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>['email', 'phone', 'offline_government_id', 's...</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6371</th>\n",
       "      <td>48202487</td>\n",
       "      <td>Beautiful convertible in downtown Chicago</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>['email', 'phone']</td>\n",
       "      <td>t</td>\n",
       "      <td>t</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>t</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id                                               name  \\\n",
       "6362  48186778   Sanitized/Sleeps 12/Free parking/3mi to Downtown   \n",
       "6363  48196515                      Cute and cozy apt in Boystown   \n",
       "6364  48196821                 Bright Penthouse 52nd floor Condo!   \n",
       "6365  48197242    2BR AT MILLENIUM PARK - PROFESSIONALLY CLEANED!   \n",
       "6366  48198799                30 E. Huron #3201 Private Residence   \n",
       "6367  48199082  PVT ROOM|50% mthly OFF|15min walk to Kedzie BR...   \n",
       "6368  48199156             Stunning and spacious apt on Southport   \n",
       "6369  48199227  BR with PRIVATE OFFICE in Old Irving Pk / Avon...   \n",
       "6370  48201067                                          Cosy loft   \n",
       "6371  48202487          Beautiful convertible in downtown Chicago   \n",
       "\n",
       "     host_response_rate host_is_superhost  host_listings_count  \\\n",
       "6362                99%                 f                 23.0   \n",
       "6363               100%                 f                  6.0   \n",
       "6364               100%                 f                  0.0   \n",
       "6365                84%                 f                  4.0   \n",
       "6366                91%                 f                 17.0   \n",
       "6367               100%                 f                  4.0   \n",
       "6368               100%                 f                  1.0   \n",
       "6369               100%                 t                  8.0   \n",
       "6370                95%                 f                  0.0   \n",
       "6371                NaN                 f                  0.0   \n",
       "\n",
       "      host_total_listings_count  \\\n",
       "6362                       23.0   \n",
       "6363                        6.0   \n",
       "6364                        0.0   \n",
       "6365                        4.0   \n",
       "6366                       17.0   \n",
       "6367                        4.0   \n",
       "6368                        1.0   \n",
       "6369                        8.0   \n",
       "6370                        0.0   \n",
       "6371                        0.0   \n",
       "\n",
       "                                     host_verifications host_has_profile_pic  \\\n",
       "6362  ['email', 'phone', 'jumio', 'offline_governmen...                    t   \n",
       "6363  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6364                                 ['email', 'phone']                    t   \n",
       "6365               ['email', 'phone', 'reviews', 'kba']                    t   \n",
       "6366                                 ['email', 'phone']                    t   \n",
       "6367  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6368  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6369  ['email', 'phone', 'google', 'reviews', 'offli...                    t   \n",
       "6370  ['email', 'phone', 'offline_government_id', 's...                    t   \n",
       "6371                                 ['email', 'phone']                    t   \n",
       "\n",
       "     host_identity_verified                     neighbourhood  ...  \\\n",
       "6362                      f                               NaN  ...   \n",
       "6363                      t                               NaN  ...   \n",
       "6364                      f  Chicago, Illinois, United States  ...   \n",
       "6365                      t                               NaN  ...   \n",
       "6366                      f  Chicago, Illinois, United States  ...   \n",
       "6367                      t  Chicago, Illinois, United States  ...   \n",
       "6368                      t  Chicago, Illinois, United States  ...   \n",
       "6369                      t                               NaN  ...   \n",
       "6370                      t                               NaN  ...   \n",
       "6371                      t  Chicago, Illinois, United States  ...   \n",
       "\n",
       "     review_scores_communication review_scores_location review_scores_value  \\\n",
       "6362                         NaN                    NaN                 NaN   \n",
       "6363                         NaN                    NaN                 NaN   \n",
       "6364                         NaN                    NaN                 NaN   \n",
       "6365                         NaN                    NaN                 NaN   \n",
       "6366                         NaN                    NaN                 NaN   \n",
       "6367                         NaN                    NaN                 NaN   \n",
       "6368                         NaN                    NaN                 NaN   \n",
       "6369                         NaN                    NaN                 NaN   \n",
       "6370                         NaN                    NaN                 NaN   \n",
       "6371                         NaN                    NaN                 NaN   \n",
       "\n",
       "                        license instant_bookable  \\\n",
       "6362               R19000077835                t   \n",
       "6363                    1233456                t   \n",
       "6364  City registration pending                f   \n",
       "6365  City registration pending                t   \n",
       "6366  City registration pending                f   \n",
       "6367  City registration pending                t   \n",
       "6368                Are-1234567                f   \n",
       "6369               R21000060523                t   \n",
       "6370  City registration pending                t   \n",
       "6371  City registration pending                t   \n",
       "\n",
       "      calculated_host_listings_count  \\\n",
       "6362                              24   \n",
       "6363                               6   \n",
       "6364                               2   \n",
       "6365                               4   \n",
       "6366                              20   \n",
       "6367                               5   \n",
       "6368                               1   \n",
       "6369                              10   \n",
       "6370                               2   \n",
       "6371                               1   \n",
       "\n",
       "      calculated_host_listings_count_entire_homes  \\\n",
       "6362                                            4   \n",
       "6363                                            6   \n",
       "6364                                            2   \n",
       "6365                                            4   \n",
       "6366                                           20   \n",
       "6367                                            0   \n",
       "6368                                            1   \n",
       "6369                                            1   \n",
       "6370                                            2   \n",
       "6371                                            1   \n",
       "\n",
       "     calculated_host_listings_count_private_rooms  \\\n",
       "6362                                           20   \n",
       "6363                                            0   \n",
       "6364                                            0   \n",
       "6365                                            0   \n",
       "6366                                            0   \n",
       "6367                                            5   \n",
       "6368                                            0   \n",
       "6369                                            9   \n",
       "6370                                            0   \n",
       "6371                                            0   \n",
       "\n",
       "      calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "6362                                            0                NaN  \n",
       "6363                                            0                NaN  \n",
       "6364                                            0                NaN  \n",
       "6365                                            0                NaN  \n",
       "6366                                            0                NaN  \n",
       "6367                                            0                NaN  \n",
       "6368                                            0                NaN  \n",
       "6369                                            0                NaN  \n",
       "6370                                            0                NaN  \n",
       "6371                                            0                NaN  \n",
       "\n",
       "[10 rows x 45 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id\n",
      "name\n",
      "host_response_rate\n",
      "host_is_superhost\n",
      "host_listings_count\n",
      "host_total_listings_count\n",
      "host_verifications\n",
      "host_has_profile_pic\n",
      "host_identity_verified\n",
      "neighbourhood\n",
      "neighbourhood_cleansed\n",
      "property_type\n",
      "room_type\n",
      "accommodates\n",
      "bathrooms_text\n",
      "bedrooms\n",
      "beds\n",
      "amenities\n",
      "price\n",
      "minimum_nights\n",
      "maximum_nights\n",
      "has_availability\n",
      "availability_30\n",
      "availability_60\n",
      "availability_90\n",
      "availability_365\n",
      "number_of_reviews\n",
      "number_of_reviews_ltm\n",
      "number_of_reviews_l30d\n",
      "first_review\n",
      "last_review\n",
      "review_scores_rating\n",
      "review_scores_accuracy\n",
      "review_scores_cleanliness\n",
      "review_scores_checkin\n",
      "review_scores_communication\n",
      "review_scores_location\n",
      "review_scores_value\n",
      "license\n",
      "instant_bookable\n",
      "calculated_host_listings_count\n",
      "calculated_host_listings_count_entire_homes\n",
      "calculated_host_listings_count_private_rooms\n",
      "calculated_host_listings_count_shared_rooms\n",
      "reviews_per_month\n"
     ]
    }
   ],
   "source": [
    "for col in listing1.columns:\n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>price</th>\n",
       "      <th>minimum_nights</th>\n",
       "      <th>maximum_nights</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_cleanliness</th>\n",
       "      <th>review_scores_checkin</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.372000e+03</td>\n",
       "      <td>4800.000000</td>\n",
       "      <td>6369.000000</td>\n",
       "      <td>6369.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>5881.000000</td>\n",
       "      <td>6327.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5125.000000</td>\n",
       "      <td>5124.000000</td>\n",
       "      <td>5123.000000</td>\n",
       "      <td>5124.000000</td>\n",
       "      <td>5124.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>5194.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.965478e+07</td>\n",
       "      <td>0.938877</td>\n",
       "      <td>64.213848</td>\n",
       "      <td>64.213848</td>\n",
       "      <td>4.157721</td>\n",
       "      <td>1.771127</td>\n",
       "      <td>2.140193</td>\n",
       "      <td>145.872881</td>\n",
       "      <td>8.331136</td>\n",
       "      <td>687.247803</td>\n",
       "      <td>...</td>\n",
       "      <td>9.522537</td>\n",
       "      <td>9.797619</td>\n",
       "      <td>9.780793</td>\n",
       "      <td>9.710968</td>\n",
       "      <td>9.512685</td>\n",
       "      <td>14.459510</td>\n",
       "      <td>12.758475</td>\n",
       "      <td>1.422473</td>\n",
       "      <td>0.131827</td>\n",
       "      <td>1.577882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.365326e+07</td>\n",
       "      <td>0.188929</td>\n",
       "      <td>271.892342</td>\n",
       "      <td>271.892342</td>\n",
       "      <td>2.871400</td>\n",
       "      <td>1.245395</td>\n",
       "      <td>1.828855</td>\n",
       "      <td>377.614539</td>\n",
       "      <td>22.557711</td>\n",
       "      <td>508.950123</td>\n",
       "      <td>...</td>\n",
       "      <td>0.883610</td>\n",
       "      <td>0.691141</td>\n",
       "      <td>0.729106</td>\n",
       "      <td>0.682588</td>\n",
       "      <td>0.833864</td>\n",
       "      <td>40.937807</td>\n",
       "      <td>41.114728</td>\n",
       "      <td>3.088673</td>\n",
       "      <td>1.193641</td>\n",
       "      <td>1.633713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.384000e+03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.954508e+07</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.370000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.225736e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1125.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.174502e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1125.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.340000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.820249e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2712.000000</td>\n",
       "      <td>2712.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>1125.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>23.730000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id  host_response_rate  host_listings_count  \\\n",
       "count  6.372000e+03         4800.000000          6369.000000   \n",
       "mean   2.965478e+07            0.938877            64.213848   \n",
       "std    1.365326e+07            0.188929           271.892342   \n",
       "min    2.384000e+03            0.000000             0.000000   \n",
       "25%    1.954508e+07            0.990000             1.000000   \n",
       "50%    3.225736e+07            1.000000             2.000000   \n",
       "75%    4.174502e+07            1.000000             7.000000   \n",
       "max    4.820249e+07            1.000000          2712.000000   \n",
       "\n",
       "       host_total_listings_count  accommodates     bedrooms         beds  \\\n",
       "count                6369.000000   6372.000000  5881.000000  6327.000000   \n",
       "mean                   64.213848      4.157721     1.771127     2.140193   \n",
       "std                   271.892342      2.871400     1.245395     1.828855   \n",
       "min                     0.000000      0.000000     1.000000     0.000000   \n",
       "25%                     1.000000      2.000000     1.000000     1.000000   \n",
       "50%                     2.000000      4.000000     1.000000     2.000000   \n",
       "75%                     7.000000      6.000000     2.000000     3.000000   \n",
       "max                  2712.000000     16.000000    50.000000    50.000000   \n",
       "\n",
       "              price  minimum_nights  maximum_nights  ...  \\\n",
       "count   6372.000000     6372.000000     6372.000000  ...   \n",
       "mean     145.872881        8.331136      687.247803  ...   \n",
       "std      377.614539       22.557711      508.950123  ...   \n",
       "min        0.000000        1.000000        1.000000  ...   \n",
       "25%       59.000000        1.000000       60.000000  ...   \n",
       "50%       90.000000        2.000000     1125.000000  ...   \n",
       "75%      149.000000        4.000000     1125.000000  ...   \n",
       "max    10000.000000      500.000000     1125.000000  ...   \n",
       "\n",
       "       review_scores_cleanliness  review_scores_checkin  \\\n",
       "count                5125.000000            5124.000000   \n",
       "mean                    9.522537               9.797619   \n",
       "std                     0.883610               0.691141   \n",
       "min                     2.000000               2.000000   \n",
       "25%                     9.000000              10.000000   \n",
       "50%                    10.000000              10.000000   \n",
       "75%                    10.000000              10.000000   \n",
       "max                    10.000000              10.000000   \n",
       "\n",
       "       review_scores_communication  review_scores_location  \\\n",
       "count                  5123.000000             5124.000000   \n",
       "mean                      9.780793                9.710968   \n",
       "std                       0.729106                0.682588   \n",
       "min                       2.000000                2.000000   \n",
       "25%                      10.000000               10.000000   \n",
       "50%                      10.000000               10.000000   \n",
       "75%                      10.000000               10.000000   \n",
       "max                      10.000000               10.000000   \n",
       "\n",
       "       review_scores_value  calculated_host_listings_count  \\\n",
       "count          5124.000000                     6372.000000   \n",
       "mean              9.512685                       14.459510   \n",
       "std               0.833864                       40.937807   \n",
       "min               2.000000                        1.000000   \n",
       "25%               9.000000                        1.000000   \n",
       "50%              10.000000                        2.000000   \n",
       "75%              10.000000                        7.000000   \n",
       "max              10.000000                      220.000000   \n",
       "\n",
       "       calculated_host_listings_count_entire_homes  \\\n",
       "count                                  6372.000000   \n",
       "mean                                     12.758475   \n",
       "std                                      41.114728   \n",
       "min                                       0.000000   \n",
       "25%                                       1.000000   \n",
       "50%                                       1.000000   \n",
       "75%                                       4.000000   \n",
       "max                                     220.000000   \n",
       "\n",
       "       calculated_host_listings_count_private_rooms  \\\n",
       "count                                   6372.000000   \n",
       "mean                                       1.422473   \n",
       "std                                        3.088673   \n",
       "min                                        0.000000   \n",
       "25%                                        0.000000   \n",
       "50%                                        0.000000   \n",
       "75%                                        1.000000   \n",
       "max                                       20.000000   \n",
       "\n",
       "       calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "count                                  6372.000000        5194.000000  \n",
       "mean                                      0.131827           1.577882  \n",
       "std                                       1.193641           1.633713  \n",
       "min                                       0.000000           0.010000  \n",
       "25%                                       0.000000           0.370000  \n",
       "50%                                       0.000000           1.050000  \n",
       "75%                                       0.000000           2.340000  \n",
       "max                                      16.000000          23.730000  \n",
       "\n",
       "[8 rows x 29 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6372 entries, 0 to 6371\n",
      "Data columns (total 45 columns):\n",
      " #   Column                                        Non-Null Count  Dtype  \n",
      "---  ------                                        --------------  -----  \n",
      " 0   id                                            6372 non-null   int64  \n",
      " 1   name                                          6372 non-null   object \n",
      " 2   host_response_rate                            4800 non-null   float64\n",
      " 3   host_is_superhost                             6369 non-null   object \n",
      " 4   host_listings_count                           6369 non-null   float64\n",
      " 5   host_total_listings_count                     6369 non-null   float64\n",
      " 6   host_verifications                            6372 non-null   object \n",
      " 7   host_has_profile_pic                          6369 non-null   object \n",
      " 8   host_identity_verified                        6369 non-null   object \n",
      " 9   neighbourhood                                 4704 non-null   object \n",
      " 10  neighbourhood_cleansed                        6372 non-null   object \n",
      " 11  property_type                                 6372 non-null   object \n",
      " 12  room_type                                     6372 non-null   object \n",
      " 13  accommodates                                  6372 non-null   int64  \n",
      " 14  bathrooms_text                                6366 non-null   object \n",
      " 15  bedrooms                                      5881 non-null   float64\n",
      " 16  beds                                          6327 non-null   float64\n",
      " 17  amenities                                     6372 non-null   object \n",
      " 18  price                                         6372 non-null   int64  \n",
      " 19  minimum_nights                                6372 non-null   int64  \n",
      " 20  maximum_nights                                6372 non-null   int64  \n",
      " 21  has_availability                              6372 non-null   object \n",
      " 22  availability_30                               6372 non-null   int64  \n",
      " 23  availability_60                               6372 non-null   int64  \n",
      " 24  availability_90                               6372 non-null   int64  \n",
      " 25  availability_365                              6372 non-null   int64  \n",
      " 26  number_of_reviews                             6372 non-null   int64  \n",
      " 27  number_of_reviews_ltm                         6372 non-null   int64  \n",
      " 28  number_of_reviews_l30d                        6372 non-null   int64  \n",
      " 29  first_review                                  5194 non-null   object \n",
      " 30  last_review                                   5194 non-null   object \n",
      " 31  review_scores_rating                          5147 non-null   float64\n",
      " 32  review_scores_accuracy                        5125 non-null   float64\n",
      " 33  review_scores_cleanliness                     5125 non-null   float64\n",
      " 34  review_scores_checkin                         5124 non-null   float64\n",
      " 35  review_scores_communication                   5123 non-null   float64\n",
      " 36  review_scores_location                        5124 non-null   float64\n",
      " 37  review_scores_value                           5124 non-null   float64\n",
      " 38  license                                       6111 non-null   object \n",
      " 39  instant_bookable                              6372 non-null   object \n",
      " 40  calculated_host_listings_count                6372 non-null   int64  \n",
      " 41  calculated_host_listings_count_entire_homes   6372 non-null   int64  \n",
      " 42  calculated_host_listings_count_private_rooms  6372 non-null   int64  \n",
      " 43  calculated_host_listings_count_shared_rooms   6372 non-null   int64  \n",
      " 44  reviews_per_month                             5194 non-null   float64\n",
      "dtypes: float64(13), int64(16), object(16)\n",
      "memory usage: 2.2+ MB\n"
     ]
    }
   ],
   "source": [
    "listing1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                                                 0\n",
       "name                                               0\n",
       "host_response_rate                              1572\n",
       "host_is_superhost                                  3\n",
       "host_listings_count                                3\n",
       "host_total_listings_count                          3\n",
       "host_verifications                                 0\n",
       "host_has_profile_pic                               3\n",
       "host_identity_verified                             3\n",
       "neighbourhood                                   1668\n",
       "neighbourhood_cleansed                             0\n",
       "property_type                                      0\n",
       "room_type                                          0\n",
       "accommodates                                       0\n",
       "bathrooms_text                                     6\n",
       "bedrooms                                         491\n",
       "beds                                              45\n",
       "amenities                                          0\n",
       "price                                              0\n",
       "minimum_nights                                     0\n",
       "maximum_nights                                     0\n",
       "has_availability                                   0\n",
       "availability_30                                    0\n",
       "availability_60                                    0\n",
       "availability_90                                    0\n",
       "availability_365                                   0\n",
       "number_of_reviews                                  0\n",
       "number_of_reviews_ltm                              0\n",
       "number_of_reviews_l30d                             0\n",
       "first_review                                    1178\n",
       "last_review                                     1178\n",
       "review_scores_rating                            1225\n",
       "review_scores_accuracy                          1247\n",
       "review_scores_cleanliness                       1247\n",
       "review_scores_checkin                           1248\n",
       "review_scores_communication                     1249\n",
       "review_scores_location                          1248\n",
       "review_scores_value                             1248\n",
       "license                                          261\n",
       "instant_bookable                                   0\n",
       "calculated_host_listings_count                     0\n",
       "calculated_host_listings_count_entire_homes        0\n",
       "calculated_host_listings_count_private_rooms       0\n",
       "calculated_host_listings_count_shared_rooms        0\n",
       "reviews_per_month                               1178\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(listing1.index) - listing1.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id - 0%\n",
      "name - 0%\n",
      "host_response_rate - 25%\n",
      "host_is_superhost - 0%\n",
      "host_listings_count - 0%\n",
      "host_total_listings_count - 0%\n",
      "host_verifications - 0%\n",
      "host_has_profile_pic - 0%\n",
      "host_identity_verified - 0%\n",
      "neighbourhood - 26%\n",
      "neighbourhood_cleansed - 0%\n",
      "property_type - 0%\n",
      "room_type - 0%\n",
      "accommodates - 0%\n",
      "bathrooms_text - 0%\n",
      "bedrooms - 8%\n",
      "beds - 1%\n",
      "amenities - 0%\n",
      "price - 0%\n",
      "minimum_nights - 0%\n",
      "maximum_nights - 0%\n",
      "has_availability - 0%\n",
      "availability_30 - 0%\n",
      "availability_60 - 0%\n",
      "availability_90 - 0%\n",
      "availability_365 - 0%\n",
      "number_of_reviews - 0%\n",
      "number_of_reviews_ltm - 0%\n",
      "number_of_reviews_l30d - 0%\n",
      "first_review - 18%\n",
      "last_review - 18%\n",
      "review_scores_rating - 19%\n",
      "review_scores_accuracy - 20%\n",
      "review_scores_cleanliness - 20%\n",
      "review_scores_checkin - 20%\n",
      "review_scores_communication - 20%\n",
      "review_scores_location - 20%\n",
      "review_scores_value - 20%\n",
      "license - 4%\n",
      "instant_bookable - 0%\n",
      "calculated_host_listings_count - 0%\n",
      "calculated_host_listings_count_entire_homes - 0%\n",
      "calculated_host_listings_count_private_rooms - 0%\n",
      "calculated_host_listings_count_shared_rooms - 0%\n",
      "reviews_per_month - 18%\n",
      "0.18487131198995604\n"
     ]
    }
   ],
   "source": [
    "#Technique 3 to check missing data- Calculate percent of missing data in the columns\\n\",\n",
    "for col in listing1.columns:\n",
    "    pct_missing = listing1[col].isnull().mean() \n",
    "#calculating % of missing values. calling numpy (np)\\n\",\n",
    "    print('{} - {}%'.format(col, round(pct_missing*100))) \n",
    "#lookup format function\\n\",\n",
    "print(pct_missing)\n",
    "#looking at the percent values you can decide which columns to delete and which to keep\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5147.000000\n",
       "mean       94.910628\n",
       "std         8.111721\n",
       "min        20.000000\n",
       "25%        93.000000\n",
       "50%        97.000000\n",
       "75%       100.000000\n",
       "max       100.000000\n",
       "Name: review_scores_rating, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Using descriptive statistics to detect outliers\\n\",\n",
    "listing1['review_scores_rating'].describe()\n",
    "#max value is too high and way above 75 percentile of the data suggesting it could be an outlier\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3. Using a bar chartâ€Što see the distribution of a categorical variable\\n\",\n",
    "#ecology is a categorical variable in this data s we can see its bar chart\\n\",\n",
    "listing1['neighbourhood_cleansed'].value_counts().plot.bar() \n",
    "#value_counts counts frequency\\n\",\n",
    "#There do not seem to be any issues with this column/variable\\n\",\n",
    "#Handling Outliers\\n\",\n",
    "# Not one solution. Do what is best for your analysis!\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Solution 3: Impute the missing data\\n\",\n",
    "# replace missing values with the median.\\n\",\n",
    "#med = df['life_sq'].median() \n",
    "#calculate the median first\\n\",\n",
    "#print(med)\n",
    "#df['life_sq'] = df['life_sq'].fillna(med) #create a new column with the calculated median\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import scipy.stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#scipy.stats.pearsonr('number_of_reviews', 'price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x110172580>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='number_of_reviews', y='price')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12302bac0>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='review_scores_rating', y='price')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import pandas as pd\n",
    "#from scipy.stats import pearsonr\n",
    "  \n",
    "#list1 = listing1['review_scores_rating']\n",
    "#list2 = listing1['price']\n",
    "  \n",
    "# Apply the pearsonr()\n",
    "#corr, _ = pearsonr(list1, list2)\n",
    "#print('Pearsons correlation: %.3f' % corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.209265</td>\n",
       "      <td>[0.19, 0.23]</td>\n",
       "      <td>0.043792</td>\n",
       "      <td>0.043492</td>\n",
       "      <td>5.461456e-64</td>\n",
       "      <td>1.309e+60</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2         p-val  \\\n",
       "pearson  6372  0.209265  [0.19, 0.23]  0.043792  0.043492  5.461456e-64   \n",
       "\n",
       "              BF10  power  \n",
       "pearson  1.309e+60    1.0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pingouin as pg\n",
    "pg.corr(x=listing1['accommodates'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pingouin\n",
      "  Downloading pingouin-0.3.10.tar.gz (204 kB)\n",
      "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 204 kB 2.7 MB/s eta 0:00:01     |â–ˆâ–ˆâ–ˆâ–ˆâ–‰                           | 30 kB 2.0 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied, skipping upgrade: numpy>=1.15 in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (1.19.2)\n",
      "Requirement already satisfied, skipping upgrade: scipy>=1.3 in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (1.5.2)\n",
      "Requirement already satisfied, skipping upgrade: pandas>=0.24 in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (1.1.3)\n",
      "Requirement already satisfied, skipping upgrade: matplotlib>=3.0.2 in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (3.3.2)\n",
      "Requirement already satisfied, skipping upgrade: seaborn>=0.9.0 in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (0.11.0)\n",
      "Requirement already satisfied, skipping upgrade: statsmodels>=0.10.0 in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (0.12.0)\n",
      "Requirement already satisfied, skipping upgrade: scikit-learn in /opt/anaconda3/lib/python3.8/site-packages (from pingouin) (0.23.2)\n",
      "Collecting pandas_flavor>=0.1.2\n",
      "  Downloading pandas_flavor-0.2.0-py2.py3-none-any.whl (6.6 kB)\n",
      "Collecting outdated\n",
      "  Downloading outdated-0.2.1-py3-none-any.whl (7.5 kB)\n",
      "Collecting tabulate\n",
      "  Downloading tabulate-0.8.9-py3-none-any.whl (25 kB)\n",
      "Requirement already satisfied, skipping upgrade: pytz>=2017.2 in /opt/anaconda3/lib/python3.8/site-packages (from pandas>=0.24->pingouin) (2020.1)\n",
      "Requirement already satisfied, skipping upgrade: python-dateutil>=2.7.3 in /opt/anaconda3/lib/python3.8/site-packages (from pandas>=0.24->pingouin) (2.8.1)\n",
      "Requirement already satisfied, skipping upgrade: pillow>=6.2.0 in /opt/anaconda3/lib/python3.8/site-packages (from matplotlib>=3.0.2->pingouin) (8.0.1)\n",
      "Requirement already satisfied, skipping upgrade: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/anaconda3/lib/python3.8/site-packages (from matplotlib>=3.0.2->pingouin) (2.4.7)\n",
      "Requirement already satisfied, skipping upgrade: kiwisolver>=1.0.1 in /opt/anaconda3/lib/python3.8/site-packages (from matplotlib>=3.0.2->pingouin) (1.3.0)\n",
      "Requirement already satisfied, skipping upgrade: certifi>=2020.06.20 in /opt/anaconda3/lib/python3.8/site-packages (from matplotlib>=3.0.2->pingouin) (2020.6.20)\n",
      "Requirement already satisfied, skipping upgrade: cycler>=0.10 in /opt/anaconda3/lib/python3.8/site-packages (from matplotlib>=3.0.2->pingouin) (0.10.0)\n",
      "Requirement already satisfied, skipping upgrade: patsy>=0.5 in /opt/anaconda3/lib/python3.8/site-packages (from statsmodels>=0.10.0->pingouin) (0.5.1)\n",
      "Requirement already satisfied, skipping upgrade: joblib>=0.11 in /opt/anaconda3/lib/python3.8/site-packages (from scikit-learn->pingouin) (0.17.0)\n",
      "Requirement already satisfied, skipping upgrade: threadpoolctl>=2.0.0 in /opt/anaconda3/lib/python3.8/site-packages (from scikit-learn->pingouin) (2.1.0)\n",
      "Collecting xarray\n",
      "  Downloading xarray-0.17.0-py3-none-any.whl (759 kB)\n",
      "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 759 kB 4.5 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied, skipping upgrade: requests in /opt/anaconda3/lib/python3.8/site-packages (from outdated->pingouin) (2.24.0)\n",
      "Collecting littleutils\n",
      "  Downloading littleutils-0.2.2.tar.gz (6.6 kB)\n",
      "Requirement already satisfied, skipping upgrade: six>=1.5 in /opt/anaconda3/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas>=0.24->pingouin) (1.15.0)\n",
      "Requirement already satisfied, skipping upgrade: setuptools>=40.4 in /opt/anaconda3/lib/python3.8/site-packages (from xarray->pandas_flavor>=0.1.2->pingouin) (50.3.1.post20201107)\n",
      "Requirement already satisfied, skipping upgrade: idna<3,>=2.5 in /opt/anaconda3/lib/python3.8/site-packages (from requests->outdated->pingouin) (2.10)\n",
      "Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/anaconda3/lib/python3.8/site-packages (from requests->outdated->pingouin) (1.25.11)\n",
      "Requirement already satisfied, skipping upgrade: chardet<4,>=3.0.2 in /opt/anaconda3/lib/python3.8/site-packages (from requests->outdated->pingouin) (3.0.4)\n",
      "Building wheels for collected packages: pingouin, littleutils\n",
      "  Building wheel for pingouin (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for pingouin: filename=pingouin-0.3.10-py3-none-any.whl size=203397 sha256=3c0f43ef9af5d67a78d746622f9ce8840a975bc70ba1e666aaed48812d26133a\n",
      "  Stored in directory: /Users/salmaa/Library/Caches/pip/wheels/26/7e/4b/d7815d18674094caa0d58cc40bb6a595b4a2e67ada30e2d42d\n",
      "  Building wheel for littleutils (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for littleutils: filename=littleutils-0.2.2-py3-none-any.whl size=7049 sha256=271256cb926effbce911b531427c48880d15baae21ef975defa823d1553b0474\n",
      "  Stored in directory: /Users/salmaa/Library/Caches/pip/wheels/6a/33/c4/0ef84d7f5568c2823e3d63a6e08988852fb9e4bc822034870a\n",
      "Successfully built pingouin littleutils\n",
      "Installing collected packages: xarray, pandas-flavor, littleutils, outdated, tabulate, pingouin\n",
      "Successfully installed littleutils-0.2.2 outdated-0.2.1 pandas-flavor-0.2.0 pingouin-0.3.10 tabulate-0.8.9 xarray-0.17.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade pingouin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5147.000000\n",
       "mean       94.910628\n",
       "std         8.111721\n",
       "min        20.000000\n",
       "25%        93.000000\n",
       "50%        97.000000\n",
       "75%       100.000000\n",
       "max       100.000000\n",
       "Name: review_scores_rating, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['review_scores_rating'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372.000000\n",
       "mean       145.872881\n",
       "std        377.614539\n",
       "min          0.000000\n",
       "25%         59.000000\n",
       "50%         90.000000\n",
       "75%        149.000000\n",
       "max      10000.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['price'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1246e9ac0>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='accommodates', y='price')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.209265</td>\n",
       "      <td>[0.19, 0.23]</td>\n",
       "      <td>0.043792</td>\n",
       "      <td>0.043492</td>\n",
       "      <td>5.461456e-64</td>\n",
       "      <td>1.309e+60</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2         p-val  \\\n",
       "pearson  6372  0.209265  [0.19, 0.23]  0.043792  0.043492  5.461456e-64   \n",
       "\n",
       "              BF10  power  \n",
       "pearson  1.309e+60    1.0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['accommodates'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1247ce0d0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='bedrooms', y='price')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5881</td>\n",
       "      <td>0.324755</td>\n",
       "      <td>[0.3, 0.35]</td>\n",
       "      <td>0.105466</td>\n",
       "      <td>0.105162</td>\n",
       "      <td>1.674878e-144</td>\n",
       "      <td>2.793e+140</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r        CI95%        r2    adj_r2          p-val  \\\n",
       "pearson  5881  0.324755  [0.3, 0.35]  0.105466  0.105162  1.674878e-144   \n",
       "\n",
       "               BF10  power  \n",
       "pearson  2.793e+140    1.0  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['bedrooms'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    4800.000000\n",
       "mean        0.938877\n",
       "std         0.188929\n",
       "min         0.000000\n",
       "25%         0.990000\n",
       "50%         1.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: host_response_rate, dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['host_response_rate'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>4800</td>\n",
       "      <td>-0.027913</td>\n",
       "      <td>[-0.06, 0.0]</td>\n",
       "      <td>0.000779</td>\n",
       "      <td>0.000363</td>\n",
       "      <td>0.053142</td>\n",
       "      <td>0.117</td>\n",
       "      <td>0.489678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  4800 -0.027913  [-0.06, 0.0]  0.000779  0.000363  0.053142  0.117   \n",
       "\n",
       "            power  \n",
       "pearson  0.489678  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['host_response_rate'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12490c790>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='host_response_rate', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x124979e50>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='neighbourhood_cleansed', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6327.000000\n",
       "mean        2.140193\n",
       "std         1.828855\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         2.000000\n",
       "75%         3.000000\n",
       "max        50.000000\n",
       "Name: beds, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['beds'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6327</td>\n",
       "      <td>0.249237</td>\n",
       "      <td>[0.23, 0.27]</td>\n",
       "      <td>0.062119</td>\n",
       "      <td>0.061823</td>\n",
       "      <td>3.315831e-90</td>\n",
       "      <td>1.79e+86</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2         p-val  \\\n",
       "pearson  6327  0.249237  [0.23, 0.27]  0.062119  0.061823  3.315831e-90   \n",
       "\n",
       "             BF10  power  \n",
       "pearson  1.79e+86    1.0  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['beds'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1251fbd00>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='beds', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean        8.331136\n",
       "std        22.557711\n",
       "min         1.000000\n",
       "25%         1.000000\n",
       "50%         2.000000\n",
       "75%         4.000000\n",
       "max       500.000000\n",
       "Name: minimum_nights, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['minimum_nights'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.012892</td>\n",
       "      <td>[-0.01, 0.04]</td>\n",
       "      <td>0.000166</td>\n",
       "      <td>-0.000148</td>\n",
       "      <td>0.303503</td>\n",
       "      <td>0.027</td>\n",
       "      <td>0.177331</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  6372  0.012892  [-0.01, 0.04]  0.000166 -0.000148  0.303503  0.027   \n",
       "\n",
       "            power  \n",
       "pearson  0.177331  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['minimum_nights'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12512beb0>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='minimum_nights', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean      687.247803\n",
       "std       508.950123\n",
       "min         1.000000\n",
       "25%        60.000000\n",
       "50%      1125.000000\n",
       "75%      1125.000000\n",
       "max      1125.000000\n",
       "Name: maximum_nights, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['maximum_nights'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.021045</td>\n",
       "      <td>[-0.0, 0.05]</td>\n",
       "      <td>0.000443</td>\n",
       "      <td>0.000129</td>\n",
       "      <td>0.092997</td>\n",
       "      <td>0.064</td>\n",
       "      <td>0.389851</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  6372  0.021045  [-0.0, 0.05]  0.000443  0.000129  0.092997  0.064   \n",
       "\n",
       "            power  \n",
       "pearson  0.389851  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['maximum_nights'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x124b421f0>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='maximum_nights', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean        0.993879\n",
       "std         0.078000\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         1.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: has_availability, dtype: float64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['has_availability'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "listing1['has_availability'].replace('t',1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.000229</td>\n",
       "      <td>[-0.02, 0.02]</td>\n",
       "      <td>5.261252e-08</td>\n",
       "      <td>-0.000314</td>\n",
       "      <td>0.985395</td>\n",
       "      <td>0.016</td>\n",
       "      <td>0.050036</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%            r2    adj_r2     p-val  \\\n",
       "pearson  6372  0.000229  [-0.02, 0.02]  5.261252e-08 -0.000314  0.985395   \n",
       "\n",
       "          BF10     power  \n",
       "pearson  0.016  0.050036  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['has_availability'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1259ddb20>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='has_availability', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean       14.028249\n",
       "std        12.945201\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%        14.000000\n",
       "75%        29.000000\n",
       "max        30.000000\n",
       "Name: availability_30, dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['availability_30'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.036159</td>\n",
       "      <td>[0.01, 0.06]</td>\n",
       "      <td>0.001307</td>\n",
       "      <td>0.000994</td>\n",
       "      <td>0.003892</td>\n",
       "      <td>1.012</td>\n",
       "      <td>0.823086</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  6372  0.036159  [0.01, 0.06]  0.001307  0.000994  0.003892  1.012   \n",
       "\n",
       "            power  \n",
       "pearson  0.823086  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['availability_30'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x125a98430>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='availability_30', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean        6.652542\n",
       "std        13.265770\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         1.000000\n",
       "75%         7.000000\n",
       "max       323.000000\n",
       "Name: number_of_reviews_ltm, dtype: float64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['number_of_reviews_ltm'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>-0.060505</td>\n",
       "      <td>[-0.08, -0.04]</td>\n",
       "      <td>0.003661</td>\n",
       "      <td>0.003348</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>1850.653</td>\n",
       "      <td>0.997979</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r           CI95%        r2    adj_r2     p-val  \\\n",
       "pearson  6372 -0.060505  [-0.08, -0.04]  0.003661  0.003348  0.000001   \n",
       "\n",
       "             BF10     power  \n",
       "pearson  1850.653  0.997979  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['number_of_reviews_ltm'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x125b6e2e0>"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='number_of_reviews_ltm', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5147.000000\n",
       "mean       94.910628\n",
       "std         8.111721\n",
       "min        20.000000\n",
       "25%        93.000000\n",
       "50%        97.000000\n",
       "75%       100.000000\n",
       "max       100.000000\n",
       "Name: review_scores_rating, dtype: float64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['review_scores_rating'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5147</td>\n",
       "      <td>0.027919</td>\n",
       "      <td>[0.0, 0.06]</td>\n",
       "      <td>0.000779</td>\n",
       "      <td>0.000391</td>\n",
       "      <td>0.045189</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.517237</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r        CI95%        r2    adj_r2     p-val  BF10  \\\n",
       "pearson  5147  0.027919  [0.0, 0.06]  0.000779  0.000391  0.045189  0.13   \n",
       "\n",
       "            power  \n",
       "pearson  0.517237  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_rating'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5125.000000\n",
       "mean        9.696390\n",
       "std         0.784757\n",
       "min         2.000000\n",
       "25%        10.000000\n",
       "50%        10.000000\n",
       "75%        10.000000\n",
       "max        10.000000\n",
       "Name: review_scores_accuracy, dtype: float64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['review_scores_accuracy'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5125</td>\n",
       "      <td>0.019067</td>\n",
       "      <td>[-0.01, 0.05]</td>\n",
       "      <td>0.000364</td>\n",
       "      <td>-0.000027</td>\n",
       "      <td>0.172313</td>\n",
       "      <td>0.044</td>\n",
       "      <td>0.276339</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  5125  0.019067  [-0.01, 0.05]  0.000364 -0.000027  0.172313  0.044   \n",
       "\n",
       "            power  \n",
       "pearson  0.276339  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_accuracy'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x125c473a0>"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='review_scores_accuracy', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5125.000000\n",
       "mean        9.522537\n",
       "std         0.883610\n",
       "min         2.000000\n",
       "25%         9.000000\n",
       "50%        10.000000\n",
       "75%        10.000000\n",
       "max        10.000000\n",
       "Name: review_scores_cleanliness, dtype: float64"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['review_scores_cleanliness'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5125</td>\n",
       "      <td>0.023309</td>\n",
       "      <td>[-0.0, 0.05]</td>\n",
       "      <td>0.000543</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>0.095223</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.385528</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r         CI95%        r2    adj_r2     p-val  BF10  \\\n",
       "pearson  5125  0.023309  [-0.0, 0.05]  0.000543  0.000153  0.095223  0.07   \n",
       "\n",
       "            power  \n",
       "pearson  0.385528  "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_cleanliness'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5124</td>\n",
       "      <td>0.0008</td>\n",
       "      <td>[-0.03, 0.03]</td>\n",
       "      <td>6.394091e-07</td>\n",
       "      <td>-0.00039</td>\n",
       "      <td>0.954366</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.050372</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n       r          CI95%            r2   adj_r2     p-val   BF10  \\\n",
       "pearson  5124  0.0008  [-0.03, 0.03]  6.394091e-07 -0.00039  0.954366  0.018   \n",
       "\n",
       "            power  \n",
       "pearson  0.050372  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_checkin'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5123</td>\n",
       "      <td>0.005762</td>\n",
       "      <td>[-0.02, 0.03]</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>-0.000357</td>\n",
       "      <td>0.680103</td>\n",
       "      <td>0.019</td>\n",
       "      <td>0.069692</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  5123  0.005762  [-0.02, 0.03]  0.000033 -0.000357  0.680103  0.019   \n",
       "\n",
       "            power  \n",
       "pearson  0.069692  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_communication'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5124</td>\n",
       "      <td>0.04151</td>\n",
       "      <td>[0.01, 0.07]</td>\n",
       "      <td>0.001723</td>\n",
       "      <td>0.001333</td>\n",
       "      <td>0.002959</td>\n",
       "      <td>1.447</td>\n",
       "      <td>0.844356</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n        r         CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  5124  0.04151  [0.01, 0.07]  0.001723  0.001333  0.002959  1.447   \n",
       "\n",
       "            power  \n",
       "pearson  0.844356  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_location'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x126e542b0>"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='review_scores_location', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5124</td>\n",
       "      <td>-0.00003</td>\n",
       "      <td>[-0.03, 0.03]</td>\n",
       "      <td>9.018035e-10</td>\n",
       "      <td>-0.000391</td>\n",
       "      <td>0.998285</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.049997</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n        r          CI95%            r2    adj_r2     p-val  \\\n",
       "pearson  5124 -0.00003  [-0.03, 0.03]  9.018035e-10 -0.000391  0.998285   \n",
       "\n",
       "          BF10     power  \n",
       "pearson  0.018  0.049997  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['review_scores_value'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372.000000\n",
       "mean       145.872881\n",
       "std        377.614539\n",
       "min          0.000000\n",
       "25%         59.000000\n",
       "50%         90.000000\n",
       "75%        149.000000\n",
       "max      10000.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['price'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean       14.459510\n",
       "std        40.937807\n",
       "min         1.000000\n",
       "25%         1.000000\n",
       "50%         2.000000\n",
       "75%         7.000000\n",
       "max       220.000000\n",
       "Name: calculated_host_listings_count, dtype: float64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['calculated_host_listings_count'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.000074</td>\n",
       "      <td>[-0.02, 0.02]</td>\n",
       "      <td>5.446185e-09</td>\n",
       "      <td>-0.000314</td>\n",
       "      <td>0.995301</td>\n",
       "      <td>0.016</td>\n",
       "      <td>0.050001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%            r2    adj_r2     p-val  \\\n",
       "pearson  6372  0.000074  [-0.02, 0.02]  5.446185e-09 -0.000314  0.995301   \n",
       "\n",
       "          BF10     power  \n",
       "pearson  0.016  0.050001  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['calculated_host_listings_count'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean       12.758475\n",
       "std        41.114728\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         1.000000\n",
       "75%         4.000000\n",
       "max       220.000000\n",
       "Name: calculated_host_listings_count_entire_homes, dtype: float64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['calculated_host_listings_count_entire_homes'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>0.006346</td>\n",
       "      <td>[-0.02, 0.03]</td>\n",
       "      <td>0.00004</td>\n",
       "      <td>-0.000274</td>\n",
       "      <td>0.612509</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.079869</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%       r2    adj_r2     p-val   BF10  \\\n",
       "pearson  6372  0.006346  [-0.02, 0.03]  0.00004 -0.000274  0.612509  0.018   \n",
       "\n",
       "            power  \n",
       "pearson  0.079869  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['calculated_host_listings_count_entire_homes'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>-0.080384</td>\n",
       "      <td>[-0.1, -0.06]</td>\n",
       "      <td>0.006462</td>\n",
       "      <td>0.00615</td>\n",
       "      <td>1.311919e-10</td>\n",
       "      <td>1.445e+07</td>\n",
       "      <td>0.999996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r          CI95%        r2   adj_r2         p-val  \\\n",
       "pearson  6372 -0.080384  [-0.1, -0.06]  0.006462  0.00615  1.311919e-10   \n",
       "\n",
       "              BF10     power  \n",
       "pearson  1.445e+07  0.999996  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['calculated_host_listings_count_private_rooms'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x126f1a2b0>"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='calculated_host_listings_count_private_rooms', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>6372</td>\n",
       "      <td>-0.029615</td>\n",
       "      <td>[-0.05, -0.01]</td>\n",
       "      <td>0.000877</td>\n",
       "      <td>0.000563</td>\n",
       "      <td>0.018077</td>\n",
       "      <td>0.257</td>\n",
       "      <td>0.657014</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r           CI95%        r2    adj_r2     p-val   BF10  \\\n",
       "pearson  6372 -0.029615  [-0.05, -0.01]  0.000877  0.000563  0.018077  0.257   \n",
       "\n",
       "            power  \n",
       "pearson  0.657014  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['calculated_host_listings_count_shared_rooms'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x126f8daf0>"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='calculated_host_listings_count_shared_rooms', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x12762c190>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='price', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n</th>\n",
       "      <th>r</th>\n",
       "      <th>CI95%</th>\n",
       "      <th>r2</th>\n",
       "      <th>adj_r2</th>\n",
       "      <th>p-val</th>\n",
       "      <th>BF10</th>\n",
       "      <th>power</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pearson</th>\n",
       "      <td>5194</td>\n",
       "      <td>-0.078972</td>\n",
       "      <td>[-0.11, -0.05]</td>\n",
       "      <td>0.006237</td>\n",
       "      <td>0.005854</td>\n",
       "      <td>1.205008e-08</td>\n",
       "      <td>1.954e+05</td>\n",
       "      <td>0.999909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            n         r           CI95%        r2    adj_r2         p-val  \\\n",
       "pearson  5194 -0.078972  [-0.11, -0.05]  0.006237  0.005854  1.205008e-08   \n",
       "\n",
       "              BF10     power  \n",
       "pearson  1.954e+05  0.999909  "
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pg.corr(x=listing1['reviews_per_month'], y=listing1['price'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5194.000000\n",
       "mean        1.577882\n",
       "std         1.633713\n",
       "min         0.010000\n",
       "25%         0.370000\n",
       "50%         1.050000\n",
       "75%         2.340000\n",
       "max        23.730000\n",
       "Name: reviews_per_month, dtype: float64"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['reviews_per_month'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1276faa90>"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data=listing1, x='reviews_per_month', y='price')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372\n",
       "unique       2\n",
       "top          f\n",
       "freq      3927\n",
       "Name: instant_bookable, dtype: object"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['instant_bookable'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372\n",
       "unique       2\n",
       "top          f\n",
       "freq      3927\n",
       "Name: instant_bookable, dtype: object"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['instant_bookable'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "listing1['instant_bookable'].replace('t',1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372\n",
       "unique       2\n",
       "top          f\n",
       "freq      3927\n",
       "Name: instant_bookable, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['instant_bookable'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# libraries for regression\\n\",\n",
    "import patsy                           # provides a syntax for specifying models  \\n\",\n",
    "import statsmodels.api as sm           # provides statistical models like ols, gmm, anova, etc...\\n\",\n",
    "import statsmodels.formula.api as smf  # provides a way to directly spec models from formulas\\n\",\n",
    "from statsmodels.iolib.summary2 import summary_col #create regression table for your report\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "price_model1= smf.ols('price ~ beds', data=listing1) \n",
    "#set up a simple linear reg model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    " #3. Estimate the Model\\n\",\n",
    "#use .fit() method to estimate the model fit for OLS\\n\",\n",
    "results1 = price_model1.fit() \n",
    "#model 1 fitting\\n\","
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.062\n",
      "Model:                            OLS   Adj. R-squared:                  0.062\n",
      "Method:                 Least Squares   F-statistic:                     418.9\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           3.32e-90\n",
      "Time:                        19:16:05   Log-Likelihood:                -46335.\n",
      "No. Observations:                6327   AIC:                         9.267e+04\n",
      "Df Residuals:                    6325   BIC:                         9.269e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept     35.8321      7.097      5.049      0.000      21.919      49.745\n",
      "beds          51.6015      2.521     20.468      0.000      46.659      56.544\n",
      "==============================================================================\n",
      "Omnibus:                    14263.950   Durbin-Watson:                   1.536\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         78552814.997\n",
      "Skew:                          21.357   Prob(JB):                         0.00\n",
      "Kurtosis:                     547.194   Cond. No.                         4.67\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "print(results1.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "price_model2= smf.ols('price ~ bedrooms', data=listing1) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.105\n",
      "Model:                            OLS   Adj. R-squared:                  0.105\n",
      "Method:                 Least Squares   F-statistic:                     693.1\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):          1.67e-144\n",
      "Time:                        19:16:38   Log-Likelihood:                -42404.\n",
      "No. Observations:                5881   AIC:                         8.481e+04\n",
      "Df Residuals:                    5879   BIC:                         8.483e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept    -16.1881      7.426     -2.180      0.029     -30.746      -1.631\n",
      "bedrooms      90.2990      3.430     26.328      0.000      83.575      97.023\n",
      "==============================================================================\n",
      "Omnibus:                    13657.379   Durbin-Watson:                   1.372\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        101852725.236\n",
      "Skew:                          22.797   Prob(JB):                         0.00\n",
      "Kurtosis:                     646.099   Cond. No.                         4.34\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "results2 = price_model2.fit() \n",
    "\n",
    "print(results2.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.044\n",
      "Model:                            OLS   Adj. R-squared:                  0.044\n",
      "Method:                 Least Squares   F-statistic:                     291.7\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           5.46e-64\n",
      "Time:                        19:16:42   Log-Likelihood:                -46709.\n",
      "No. Observations:                6372   AIC:                         9.342e+04\n",
      "Df Residuals:                    6370   BIC:                         9.344e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "================================================================================\n",
      "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------\n",
      "Intercept       31.4516      8.141      3.863      0.000      15.492      47.411\n",
      "accommodates    27.5202      1.611     17.080      0.000      24.362      30.679\n",
      "==============================================================================\n",
      "Omnibus:                    14348.042   Durbin-Watson:                   1.548\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         77214217.639\n",
      "Skew:                          21.310   Prob(JB):                         0.00\n",
      "Kurtosis:                     540.596   Cond. No.                         9.13\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model3= smf.ols('price ~ accommodates', data=listing1) \n",
    "results3 = price_model3.fit() \n",
    "print(results3.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.001\n",
      "Model:                            OLS   Adj. R-squared:                  0.001\n",
      "Method:                 Least Squares   F-statistic:                     3.741\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):             0.0531\n",
      "Time:                        20:29:21   Log-Likelihood:                -33739.\n",
      "No. Observations:                4800   AIC:                         6.748e+04\n",
      "Df Residuals:                    4798   BIC:                         6.749e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept            174.2623     19.991      8.717      0.000     135.070     213.454\n",
      "host_response_rate   -40.3762     20.874     -1.934      0.053     -81.300       0.547\n",
      "==============================================================================\n",
      "Omnibus:                    10797.748   Durbin-Watson:                   1.958\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         81419621.278\n",
      "Skew:                          20.932   Prob(JB):                         0.00\n",
      "Kurtosis:                     639.668   Cond. No.                         10.0\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model4= smf.ols('price ~ host_response_rate', data=listing1) \n",
    "results4 = price_model4.fit() \n",
    "print(results4.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                  0.000\n",
      "Method:                 Least Squares   F-statistic:                     1.059\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.304\n",
      "Time:                        20:31:47   Log-Likelihood:                -46851.\n",
      "No. Observations:                6372   AIC:                         9.371e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==================================================================================\n",
      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept        144.0749      5.043     28.570      0.000     134.189     153.961\n",
      "minimum_nights     0.2158      0.210      1.029      0.304      -0.195       0.627\n",
      "==============================================================================\n",
      "Omnibus:                    14013.736   Durbin-Watson:                   1.562\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65200059.438\n",
      "Skew:                          20.175   Prob(JB):                         0.00\n",
      "Kurtosis:                     496.909   Cond. No.                         25.6\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model5= smf.ols('price ~ minimum_nights', data=listing1) \n",
    "results5 = price_model5.fit() \n",
    "print(results5.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                  0.000\n",
      "Method:                 Least Squares   F-statistic:                     2.823\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):             0.0930\n",
      "Time:                        20:33:04   Log-Likelihood:                -46850.\n",
      "No. Observations:                6372   AIC:                         9.370e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==================================================================================\n",
      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept        135.1418      7.948     17.003      0.000     119.561     150.722\n",
      "maximum_nights     0.0156      0.009      1.680      0.093      -0.003       0.034\n",
      "==============================================================================\n",
      "Omnibus:                    14017.419   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65323967.734\n",
      "Skew:                          20.188   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.380   Cond. No.                     1.44e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.44e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "price_model6= smf.ols('price ~ maximum_nights', data=listing1) \n",
    "results6 = price_model6.fit() \n",
    "print(results6.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                 0.0003351\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.985\n",
      "Time:                        20:34:25   Log-Likelihood:                -46852.\n",
      "No. Observations:                6372   AIC:                         9.371e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=========================================================================================\n",
      "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "Intercept               144.7692     60.471      2.394      0.017      26.225     263.314\n",
      "has_availability[T.t]     1.1104     60.657      0.018      0.985    -117.798     120.019\n",
      "==============================================================================\n",
      "Omnibus:                    14015.065   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65247799.295\n",
      "Skew:                          20.180   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.091   Cond. No.                         25.5\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model7= smf.ols('price ~ has_availability', data=listing1) \n",
    "results7 = price_model7.fit() \n",
    "print(results7.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.004\n",
      "Model:                            OLS   Adj. R-squared:                  0.004\n",
      "Method:                 Least Squares   F-statistic:                     23.40\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           1.34e-06\n",
      "Time:                        20:36:17   Log-Likelihood:                -46840.\n",
      "No. Observations:                6372   AIC:                         9.368e+04\n",
      "Df Residuals:                    6370   BIC:                         9.370e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=========================================================================================\n",
      "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "Intercept               157.3304      5.283     29.781      0.000     146.974     167.687\n",
      "number_of_reviews_ltm    -1.7223      0.356     -4.838      0.000      -2.420      -1.024\n",
      "==============================================================================\n",
      "Omnibus:                    14025.766   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65646773.502\n",
      "Skew:                          20.215   Prob(JB):                         0.00\n",
      "Kurtosis:                     498.603   Cond. No.                         16.6\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model8= smf.ols('price ~ number_of_reviews_ltm', data=listing1) \n",
    "results8 = price_model8.fit() \n",
    "print(results8.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.002\n",
      "Model:                            OLS   Adj. R-squared:                  0.002\n",
      "Method:                 Least Squares   F-statistic:                     12.56\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           0.000398\n",
      "Time:                        20:38:35   Log-Likelihood:                -46845.\n",
      "No. Observations:                6372   AIC:                         9.369e+04\n",
      "Df Residuals:                    6370   BIC:                         9.371e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept                151.8283      5.016     30.267      0.000     141.995     161.662\n",
      "number_of_reviews_l30d   -13.6210      3.844     -3.543      0.000     -21.157      -6.085\n",
      "==============================================================================\n",
      "Omnibus:                    14019.732   Durbin-Watson:                   1.564\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65429325.975\n",
      "Skew:                          20.195   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.780   Cond. No.                         1.56\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model9= smf.ols('price ~ number_of_reviews_l30d', data=listing1) \n",
    "results9 = price_model9.fit() \n",
    "print(results9.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.001\n",
      "Model:                            OLS   Adj. R-squared:                  0.001\n",
      "Method:                 Least Squares   F-statistic:                     4.014\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):             0.0452\n",
      "Time:                        20:41:21   Log-Likelihood:                -37830.\n",
      "No. Observations:                5147   AIC:                         7.566e+04\n",
      "Df Residuals:                    5145   BIC:                         7.568e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "========================================================================================\n",
      "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------\n",
      "Intercept               14.4192     61.645      0.234      0.815    -106.432     135.270\n",
      "review_scores_rating     1.2965      0.647      2.003      0.045       0.028       2.565\n",
      "==============================================================================\n",
      "Omnibus:                    11703.538   Durbin-Watson:                   1.458\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65471184.429\n",
      "Skew:                          21.730   Prob(JB):                         0.00\n",
      "Kurtosis:                     553.815   Cond. No.                     1.12e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.12e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "price_model10= smf.ols('price ~ review_scores_rating', data=listing1) \n",
    "results10 = price_model10.fit() \n",
    "print(results10.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.002\n",
      "Model:                            OLS   Adj. R-squared:                  0.002\n",
      "Method:                 Least Squares   F-statistic:                     8.841\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):            0.00296\n",
      "Time:                        20:42:19   Log-Likelihood:                -37670.\n",
      "No. Observations:                5124   AIC:                         7.534e+04\n",
      "Df Residuals:                    5122   BIC:                         7.536e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept                -85.2664     75.165     -1.134      0.257    -232.621      62.089\n",
      "review_scores_location    22.9578      7.721      2.973      0.003       7.821      38.095\n",
      "==============================================================================\n",
      "Omnibus:                    11640.227   Durbin-Watson:                   1.459\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         64591216.040\n",
      "Skew:                          21.681   Prob(JB):                         0.00\n",
      "Kurtosis:                     551.320   Cond. No.                         140.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model11= smf.ols('price ~ review_scores_location', data=listing1) \n",
    "results11 = price_model11.fit() \n",
    "print(results11.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.001\n",
      "Model:                            OLS   Adj. R-squared:                  0.000\n",
      "Method:                 Least Squares   F-statistic:                     2.785\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):             0.0952\n",
      "Time:                        20:44:50   Log-Likelihood:                -37679.\n",
      "No. Observations:                5125   AIC:                         7.536e+04\n",
      "Df Residuals:                    5123   BIC:                         7.538e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=============================================================================================\n",
      "                                coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------\n",
      "Intercept                    42.8419     57.065      0.751      0.453     -69.029     154.713\n",
      "review_scores_cleanliness     9.9575      5.967      1.669      0.095      -1.740      21.655\n",
      "==============================================================================\n",
      "Omnibus:                    11642.467   Durbin-Watson:                   1.459\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         64599743.659\n",
      "Skew:                          21.681   Prob(JB):                         0.00\n",
      "Kurtosis:                     551.302   Cond. No.                         105.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model12= smf.ols('price ~ review_scores_cleanliness', data=listing1) \n",
    "results12 = price_model12.fit() \n",
    "print(results12.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                  0.003275\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.954\n",
      "Time:                        20:46:05   Log-Likelihood:                -37674.\n",
      "No. Observations:                5124   AIC:                         7.535e+04\n",
      "Df Residuals:                    5122   BIC:                         7.537e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=========================================================================================\n",
      "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "Intercept               133.3965     74.963      1.779      0.075     -13.563     280.356\n",
      "review_scores_checkin     0.4368      7.632      0.057      0.954     -14.526      15.399\n",
      "==============================================================================\n",
      "Omnibus:                    11638.164   Durbin-Watson:                   1.457\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         64499297.904\n",
      "Skew:                          21.672   Prob(JB):                         0.00\n",
      "Kurtosis:                     550.929   Cond. No.                         141.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model13= smf.ols('price ~ review_scores_checkin', data=listing1) \n",
    "results13 = price_model13.fit() \n",
    "print(results13.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                    0.1700\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.680\n",
      "Time:                        20:46:53   Log-Likelihood:                -37667.\n",
      "No. Observations:                5123   AIC:                         7.534e+04\n",
      "Df Residuals:                    5121   BIC:                         7.535e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================================\n",
      "                                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------------\n",
      "Intercept                     108.4899     70.971      1.529      0.126     -30.643     247.623\n",
      "review_scores_communication     2.9838      7.236      0.412      0.680     -11.202      17.170\n",
      "==============================================================================\n",
      "Omnibus:                    11635.370   Durbin-Watson:                   1.457\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         64461894.257\n",
      "Skew:                          21.670   Prob(JB):                         0.00\n",
      "Kurtosis:                     550.823   Cond. No.                         133.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model14= smf.ols('price ~ review_scores_communication', data=listing1) \n",
    "results14 = price_model14.fit() \n",
    "print(results14.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                  0.000\n",
      "Method:                 Least Squares   F-statistic:                     1.863\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.172\n",
      "Time:                        20:48:36   Log-Likelihood:                -37680.\n",
      "No. Observations:                5125   AIC:                         7.536e+04\n",
      "Df Residuals:                    5123   BIC:                         7.538e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept                 48.7303     65.365      0.746      0.456     -79.413     176.873\n",
      "review_scores_accuracy     9.1717      6.719      1.365      0.172      -4.001      22.344\n",
      "==============================================================================\n",
      "Omnibus:                    11639.179   Durbin-Watson:                   1.458\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         64482023.409\n",
      "Skew:                          21.667   Prob(JB):                         0.00\n",
      "Kurtosis:                     550.802   Cond. No.                         122.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model15= smf.ols('price ~ review_scores_accuracy', data=listing1) \n",
    "results15 = price_model15.fit() \n",
    "print(results15.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                 4.619e-06\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.998\n",
      "Time:                        20:52:09   Log-Likelihood:                -37674.\n",
      "No. Observations:                5124   AIC:                         7.535e+04\n",
      "Df Residuals:                    5122   BIC:                         7.537e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "Intercept             137.8052     60.407      2.281      0.023      19.382     256.228\n",
      "review_scores_value    -0.0136      6.326     -0.002      0.998     -12.415      12.388\n",
      "==============================================================================\n",
      "Omnibus:                    11638.196   Durbin-Watson:                   1.457\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         64500099.413\n",
      "Skew:                          21.672   Prob(JB):                         0.00\n",
      "Kurtosis:                     550.932   Cond. No.                         111.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model16= smf.ols('price ~ review_scores_value', data=listing1) \n",
    "results16 = price_model16.fit() \n",
    "print(results16.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                    0.9047\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.342\n",
      "Time:                        20:53:19   Log-Likelihood:                -46831.\n",
      "No. Observations:                6369   AIC:                         9.367e+04\n",
      "Df Residuals:                    6367   BIC:                         9.368e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "Intercept             144.8261      4.863     29.781      0.000     135.293     154.359\n",
      "host_listings_count     0.0166      0.017      0.951      0.342      -0.018       0.051\n",
      "==============================================================================\n",
      "Omnibus:                    14010.657   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65253242.799\n",
      "Skew:                          20.187   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.227   Cond. No.                         287.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model17= smf.ols('price ~ host_listings_count', data=listing1) \n",
    "results17 = price_model17.fit() \n",
    "print(results17.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.001\n",
      "Model:                            OLS   Adj. R-squared:                  0.001\n",
      "Method:                 Least Squares   F-statistic:                     3.741\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):             0.0531\n",
      "Time:                        20:55:16   Log-Likelihood:                -33739.\n",
      "No. Observations:                4800   AIC:                         6.748e+04\n",
      "Df Residuals:                    4798   BIC:                         6.749e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept            174.2623     19.991      8.717      0.000     135.070     213.454\n",
      "host_response_rate   -40.3762     20.874     -1.934      0.053     -81.300       0.547\n",
      "==============================================================================\n",
      "Omnibus:                    10797.748   Durbin-Watson:                   1.958\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         81419621.278\n",
      "Skew:                          20.932   Prob(JB):                         0.00\n",
      "Kurtosis:                     639.668   Cond. No.                         10.0\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model18= smf.ols('price ~ host_response_rate', data=listing1) \n",
    "results18 = price_model18.fit() \n",
    "print(results18.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    4800.000000\n",
       "mean        0.938877\n",
       "std         0.188929\n",
       "min         0.000000\n",
       "25%         0.990000\n",
       "50%         1.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: host_response_rate, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['host_response_rate'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                    0.1346\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):              0.714\n",
      "Time:                        21:00:16   Log-Likelihood:                -46852.\n",
      "No. Observations:                6372   AIC:                         9.371e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=========================================================================================\n",
      "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "Intercept               144.5034      6.026     23.979      0.000     132.690     156.317\n",
      "instant_bookable[T.t]     3.5690      9.729      0.367      0.714     -15.502      22.640\n",
      "==============================================================================\n",
      "Omnibus:                    14014.375   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65223981.893\n",
      "Skew:                          20.178   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.000   Cond. No.                         2.43\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model19= smf.ols('price ~ instant_bookable', data=listing1) \n",
    "results19 = price_model19.fit() \n",
    "print(results19.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372\n",
       "unique       2\n",
       "top          f\n",
       "freq      3927\n",
       "Name: instant_bookable, dtype: object"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['instant_bookable'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    5194.000000\n",
       "mean        1.577882\n",
       "std         1.633713\n",
       "min         0.010000\n",
       "25%         0.370000\n",
       "50%         1.050000\n",
       "75%         2.340000\n",
       "max        23.730000\n",
       "Name: reviews_per_month, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['reviews_per_month'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.006\n",
      "Model:                            OLS   Adj. R-squared:                  0.006\n",
      "Method:                 Least Squares   F-statistic:                     32.58\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):           1.21e-08\n",
      "Time:                        21:02:18   Log-Likelihood:                -38144.\n",
      "No. Observations:                5194   AIC:                         7.629e+04\n",
      "Df Residuals:                    5192   BIC:                         7.631e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=====================================================================================\n",
      "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------\n",
      "Intercept           166.3752      7.222     23.038      0.000     152.218     180.533\n",
      "reviews_per_month   -18.1505      3.180     -5.708      0.000     -24.384     -11.917\n",
      "==============================================================================\n",
      "Omnibus:                    11827.506   Durbin-Watson:                   1.457\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         67163419.518\n",
      "Skew:                          21.804   Prob(JB):                         0.00\n",
      "Kurtosis:                     558.375   Cond. No.                         3.48\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model20= smf.ols('price ~ reviews_per_month', data=listing1) \n",
    "results20 = price_model20.fit() \n",
    "print(results20.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count          6372\n",
       "unique           77\n",
       "top       West Town\n",
       "freq            717\n",
       "Name: neighbourhood_cleansed, dtype: object"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['neighbourhood_cleansed'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.019\n",
      "Model:                            OLS   Adj. R-squared:                  0.007\n",
      "Method:                 Least Squares   F-statistic:                     1.568\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):            0.00126\n",
      "Time:                        21:05:26   Log-Likelihood:                -46792.\n",
      "No. Observations:                6372   AIC:                         9.374e+04\n",
      "Df Residuals:                    6295   BIC:                         9.426e+04\n",
      "Df Model:                          76                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================================================\n",
      "                                                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------------------------------\n",
      "Intercept                                           84.6607     50.291      1.683      0.092     -13.927     183.248\n",
      "neighbourhood_cleansed[T.Archer Heights]            -9.6607    161.663     -0.060      0.952    -326.574     307.253\n",
      "neighbourhood_cleansed[T.Armour Square]             19.4008     68.616      0.283      0.777    -115.110     153.912\n",
      "neighbourhood_cleansed[T.Ashburn]                   -5.3880    124.117     -0.043      0.965    -248.699     237.923\n",
      "neighbourhood_cleansed[T.Auburn Gresham]            12.7393    175.658      0.073      0.942    -331.611     357.090\n",
      "neighbourhood_cleansed[T.Austin]                    44.5393     73.225      0.608      0.543     -99.006     188.085\n",
      "neighbourhood_cleansed[T.Avalon Park]                7.3393    270.825      0.027      0.978    -523.569     538.248\n",
      "neighbourhood_cleansed[T.Avondale]                  26.5097     59.819      0.443      0.658     -90.756     143.775\n",
      "neighbourhood_cleansed[T.Belmont Cragin]            30.4464     87.106      0.350      0.727    -140.312     201.205\n",
      "neighbourhood_cleansed[T.Beverly]                  -34.5179    150.873     -0.229      0.819    -330.280     261.244\n",
      "neighbourhood_cleansed[T.Bridgeport]                11.3933     61.686      0.185      0.853    -109.532     132.319\n",
      "neighbourhood_cleansed[T.Brighton Park]              3.4262     93.205      0.037      0.971    -179.287     186.140\n",
      "neighbourhood_cleansed[T.Burnside]                  47.8393    270.825      0.177      0.860    -483.069     578.748\n",
      "neighbourhood_cleansed[T.Calumet Heights]          -29.4702     96.300     -0.306      0.760    -218.250     159.310\n",
      "neighbourhood_cleansed[T.Chatham]                    5.0893    142.244      0.036      0.971    -273.758     283.936\n",
      "neighbourhood_cleansed[T.Chicago Lawn]             -31.6607    129.200     -0.245      0.806    -284.936     221.615\n",
      "neighbourhood_cleansed[T.Clearing]                  -9.3274    223.026     -0.042      0.967    -446.533     427.879\n",
      "neighbourhood_cleansed[T.Douglas]                   28.2624     68.616      0.412      0.680    -106.248     162.773\n",
      "neighbourhood_cleansed[T.Dunning]                   -8.4789     82.590     -0.103      0.918    -170.383     153.426\n",
      "neighbourhood_cleansed[T.East Garfield Park]       -13.1845     62.274     -0.212      0.832    -135.263     108.894\n",
      "neighbourhood_cleansed[T.East Side]                 90.3393    270.825      0.334      0.739    -440.569     621.248\n",
      "neighbourhood_cleansed[T.Edgewater]                 20.7707     58.778      0.353      0.724     -94.455     135.996\n",
      "neighbourhood_cleansed[T.Edison Park]               34.3393    270.825      0.127      0.899    -496.569     565.248\n",
      "neighbourhood_cleansed[T.Englewood]                 24.9821    112.454      0.222      0.824    -195.466     245.430\n",
      "neighbourhood_cleansed[T.Forest Glen]               31.7560    119.716      0.265      0.791    -202.929     266.441\n",
      "neighbourhood_cleansed[T.Fuller Park]                0.0060    161.663   3.68e-05      1.000    -316.908     316.920\n",
      "neighbourhood_cleansed[T.Gage Park]                 14.3393    379.688      0.038      0.970    -729.978     758.657\n",
      "neighbourhood_cleansed[T.Garfield Ridge]             6.7560    119.716      0.056      0.955    -227.929     241.441\n",
      "neighbourhood_cleansed[T.Grand Boulevard]           40.1991     62.071      0.648      0.517     -81.482     161.880\n",
      "neighbourhood_cleansed[T.Greater Grand Crossing]    38.7893     77.910      0.498      0.619    -113.941     191.520\n",
      "neighbourhood_cleansed[T.Hegewisch]                 40.0060    223.026      0.179      0.858    -397.200     477.212\n",
      "neighbourhood_cleansed[T.Hermosa]                    7.9275    104.214      0.076      0.939    -196.368     212.223\n",
      "neighbourhood_cleansed[T.Humboldt Park]              8.3123     66.657      0.125      0.901    -122.358     138.982\n",
      "neighbourhood_cleansed[T.Hyde Park]                -10.8607     63.404     -0.171      0.864    -135.154     113.433\n",
      "neighbourhood_cleansed[T.Irving Park]               35.2198     58.480      0.602      0.547     -79.422     149.861\n",
      "neighbourhood_cleansed[T.Jefferson Park]            -7.9750     81.092     -0.098      0.922    -166.942     150.992\n",
      "neighbourhood_cleansed[T.Kenwood]                   42.4756     75.816      0.560      0.575    -106.150     191.102\n",
      "neighbourhood_cleansed[T.Lake View]                123.9072     52.687      2.352      0.019      20.623     227.192\n",
      "neighbourhood_cleansed[T.Lincoln Park]              84.7669     54.631      1.552      0.121     -22.329     191.863\n",
      "neighbourhood_cleansed[T.Lincoln Square]             8.5692     64.476      0.133      0.894    -117.826     134.964\n",
      "neighbourhood_cleansed[T.Logan Square]              45.2481     53.833      0.841      0.401     -60.283     150.780\n",
      "neighbourhood_cleansed[T.Loop]                     178.7150     54.391      3.286      0.001      72.090     285.340\n",
      "neighbourhood_cleansed[T.Lower West Side]           13.2093     57.701      0.229      0.819     -99.904     126.322\n",
      "neighbourhood_cleansed[T.Mckinley Park]             39.4107     87.106      0.452      0.651    -131.347     210.169\n",
      "neighbourhood_cleansed[T.Montclare]                -13.9940    223.026     -0.063      0.950    -451.200     423.212\n",
      "neighbourhood_cleansed[T.Morgan Park]                0.0060    161.663   3.68e-05      1.000    -316.908     316.920\n",
      "neighbourhood_cleansed[T.Mount Greenwood]          -36.4107    194.776     -0.187      0.852    -418.238     345.416\n",
      "neighbourhood_cleansed[T.Near North Side]          110.6636     52.264      2.117      0.034       8.209     213.118\n",
      "neighbourhood_cleansed[T.Near South Side]           62.2663     59.691      1.043      0.297     -54.748     179.281\n",
      "neighbourhood_cleansed[T.Near West Side]            67.4010     54.464      1.238      0.216     -39.367     174.169\n",
      "neighbourhood_cleansed[T.New City]                 -23.8960    104.214     -0.229      0.819    -228.191     180.399\n",
      "neighbourhood_cleansed[T.North Center]              58.7960     60.369      0.974      0.330     -59.548     177.140\n",
      "neighbourhood_cleansed[T.North Lawndale]           -25.5573     86.099     -0.297      0.767    -194.341     143.227\n",
      "neighbourhood_cleansed[T.North Park]                32.7560     91.818      0.357      0.721    -147.239     212.751\n",
      "neighbourhood_cleansed[T.Norwood Park]             -19.5750     81.092     -0.241      0.809    -178.542     139.392\n",
      "neighbourhood_cleansed[T.Oakland]                   85.3393    119.716      0.713      0.476    -149.345     320.024\n",
      "neighbourhood_cleansed[T.Ohare]                     -5.2163    135.153     -0.039      0.969    -270.162     259.729\n",
      "neighbourhood_cleansed[T.Portage Park]              12.7209     66.278      0.192      0.848    -117.207     142.648\n",
      "neighbourhood_cleansed[T.Pullman]                    3.8948    135.153      0.029      0.977    -261.050     268.840\n",
      "neighbourhood_cleansed[T.Riverdale]                -62.6607    270.825     -0.231      0.817    -593.569     468.248\n",
      "neighbourhood_cleansed[T.Rogers Park]               18.1044     60.018      0.302      0.763     -99.551     135.760\n",
      "neighbourhood_cleansed[T.Roseland]                  34.7837    135.153      0.257      0.797    -230.162     299.729\n",
      "neighbourhood_cleansed[T.South Chicago]             31.0761     99.918      0.311      0.756    -164.797     226.949\n",
      "neighbourhood_cleansed[T.South Deering]              2.8393    270.825      0.010      0.992    -528.069     533.748\n",
      "neighbourhood_cleansed[T.South Lawndale]           -15.4979     76.308     -0.203      0.839    -165.088     134.093\n",
      "neighbourhood_cleansed[T.South Shore]                0.3968     64.476      0.006      0.995    -125.998     126.792\n",
      "neighbourhood_cleansed[T.Uptown]                    42.3777     57.510      0.737      0.461     -70.361     155.117\n",
      "neighbourhood_cleansed[T.Washington Heights]       -25.4107    194.776     -0.130      0.896    -407.238     356.416\n",
      "neighbourhood_cleansed[T.Washington Park]           20.2787     82.590      0.246      0.806    -141.626     182.183\n",
      "neighbourhood_cleansed[T.West Elsdon]              -22.9940    223.026     -0.103      0.918    -460.200     414.212\n",
      "neighbourhood_cleansed[T.West Englewood]           130.3393    135.153      0.964      0.335    -134.606     395.285\n",
      "neighbourhood_cleansed[T.West Garfield Park]         5.0235     99.918      0.050      0.960    -190.850     200.897\n",
      "neighbourhood_cleansed[T.West Lawn]                -42.6607    135.153     -0.316      0.752    -307.606     222.285\n",
      "neighbourhood_cleansed[T.West Pullman]              15.3393    379.688      0.040      0.968    -728.978     759.657\n",
      "neighbourhood_cleansed[T.West Ridge]               -19.5431     64.772     -0.302      0.763    -146.519     107.433\n",
      "neighbourhood_cleansed[T.West Town]                 86.9292     52.218      1.665      0.096     -15.436     189.294\n",
      "neighbourhood_cleansed[T.Woodlawn]                 -19.8585     63.919     -0.311      0.756    -145.161     105.444\n",
      "==============================================================================\n",
      "Omnibus:                    14028.766   Durbin-Watson:                   1.569\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65753921.660\n",
      "Skew:                          20.225   Prob(JB):                         0.00\n",
      "Kurtosis:                     499.009   Cond. No.                         102.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model21= smf.ols('price ~ neighbourhood_cleansed', data=listing1) \n",
    "results21 = price_model21.fit() \n",
    "print(results21.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count       6366\n",
       "unique        32\n",
       "top       1 bath\n",
       "freq        3098\n",
       "Name: bathrooms_text, dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing['bathrooms_text'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.151\n",
      "Model:                            OLS   Adj. R-squared:                  0.147\n",
      "Method:                 Least Squares   F-statistic:                     36.40\n",
      "Date:                Sat, 27 Mar 2021   Prob (F-statistic):          7.05e-199\n",
      "Time:                        21:12:18   Log-Likelihood:                -46288.\n",
      "No. Observations:                6366   AIC:                         9.264e+04\n",
      "Df Residuals:                    6334   BIC:                         9.286e+04\n",
      "Df Model:                          31                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================================\n",
      "                                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------------------\n",
      "Intercept                              87.1667    142.435      0.612      0.541    -192.054     366.388\n",
      "bathrooms_text[T.0 shared baths]     2474.0833    225.210     10.986      0.000    2032.596    2915.571\n",
      "bathrooms_text[T.1 bath]               36.9783    142.573      0.259      0.795    -242.513     316.470\n",
      "bathrooms_text[T.1 private bath]       18.3708    143.373      0.128      0.898    -262.689     299.431\n",
      "bathrooms_text[T.1 shared bath]       -28.8383    142.925     -0.202      0.840    -309.019     251.343\n",
      "bathrooms_text[T.1.5 baths]            64.0670    144.739      0.443      0.658    -219.670     347.804\n",
      "bathrooms_text[T.1.5 shared baths]    -31.9497    146.411     -0.218      0.827    -318.964     255.065\n",
      "bathrooms_text[T.10 baths]           1768.8333    376.848      4.694      0.000    1030.084    2507.583\n",
      "bathrooms_text[T.11 shared baths]     -37.6667    225.210     -0.167      0.867    -479.154     403.821\n",
      "bathrooms_text[T.11.5 shared baths]   -57.1667    376.848     -0.152      0.879    -795.916     681.583\n",
      "bathrooms_text[T.12.5 baths]          212.8333    376.848      0.565      0.572    -525.916     951.583\n",
      "bathrooms_text[T.2 baths]             123.9718    142.886      0.868      0.386    -156.133     404.077\n",
      "bathrooms_text[T.2 shared baths]      -41.5348    144.764     -0.287      0.774    -325.321     242.251\n",
      "bathrooms_text[T.2.5 baths]           202.1952    145.219      1.392      0.164     -82.483     486.874\n",
      "bathrooms_text[T.2.5 shared baths]    -46.1667    156.030     -0.296      0.767    -352.038     259.705\n",
      "bathrooms_text[T.3 baths]             218.4333    146.268      1.493      0.135     -68.302     505.168\n",
      "bathrooms_text[T.3 shared baths]      -44.8667    156.030     -0.288      0.774    -350.738     261.005\n",
      "bathrooms_text[T.3.5 baths]           376.6905    147.434      2.555      0.011      87.669     665.712\n",
      "bathrooms_text[T.4 baths]             327.0702    153.268      2.134      0.033      26.613     627.527\n",
      "bathrooms_text[T.4 shared baths]      -71.9167    188.424     -0.382      0.703    -441.291     297.458\n",
      "bathrooms_text[T.4.5 baths]           756.8333    158.609      4.772      0.000     445.906    1067.761\n",
      "bathrooms_text[T.42 baths]           5412.8333    376.848     14.363      0.000    4674.084    6151.583\n",
      "bathrooms_text[T.5 baths]            1724.5476    194.106      8.885      0.000    1344.034    2105.062\n",
      "bathrooms_text[T.5.5 baths]          1253.8333    284.870      4.401      0.000     695.391    1812.275\n",
      "bathrooms_text[T.6 baths]            1335.6667    201.434      6.631      0.000     940.789    1730.545\n",
      "bathrooms_text[T.6.5 baths]          1044.8333    284.870      3.668      0.000     486.391    1603.275\n",
      "bathrooms_text[T.7 baths]             441.8333    376.848      1.172      0.241    -296.916    1180.583\n",
      "bathrooms_text[T.8 shared baths]       62.8333    376.848      0.167      0.868    -675.916     801.583\n",
      "bathrooms_text[T.8.5 baths]          1592.8333    376.848      4.227      0.000     854.084    2331.583\n",
      "bathrooms_text[T.Half-bath]           -48.6667    225.210     -0.216      0.829    -490.154     392.821\n",
      "bathrooms_text[T.Private half-bath]   123.1667    246.705      0.499      0.618    -360.458     606.792\n",
      "bathrooms_text[T.Shared half-bath]    -42.8333    246.705     -0.174      0.862    -526.458     440.792\n",
      "==============================================================================\n",
      "Omnibus:                    14279.220   Durbin-Watson:                   1.481\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         82602246.242\n",
      "Skew:                          21.057   Prob(JB):                         0.00\n",
      "Kurtosis:                     559.452   Cond. No.                         219.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model22= smf.ols('price ~ bathrooms_text', data=listing) \n",
    "results22 = price_model22.fit() \n",
    "print(results22.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372.000000\n",
       "mean       145.872881\n",
       "std        377.614539\n",
       "min          0.000000\n",
       "25%         59.000000\n",
       "50%         90.000000\n",
       "75%        149.000000\n",
       "max      10000.000000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing['price'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.107\n",
      "Model:                            OLS   Adj. R-squared:                  0.107\n",
      "Method:                 Least Squares   F-statistic:                     350.0\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):          2.84e-144\n",
      "Time:                        19:18:51   Log-Likelihood:                -42118.\n",
      "No. Observations:                5840   AIC:                         8.424e+04\n",
      "Df Residuals:                    5837   BIC:                         8.426e+04\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept    -16.4522      7.468     -2.203      0.028     -31.092      -1.813\n",
      "beds          12.7499      4.091      3.117      0.002       4.730      20.769\n",
      "bedrooms      74.5119      6.144     12.129      0.000      62.468      86.555\n",
      "==============================================================================\n",
      "Omnibus:                    13554.857   Durbin-Watson:                   1.369\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        100277020.128\n",
      "Skew:                          22.768   Prob(JB):                         0.00\n",
      "Kurtosis:                     643.331   Cond. No.                         7.24\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model23= smf.ols('price ~ beds+bedrooms', data=listing1) \n",
    "results23 = price_model23.fit() \n",
    "print(results23.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.107\n",
      "Model:                            OLS   Adj. R-squared:                  0.107\n",
      "Method:                 Least Squares   F-statistic:                     233.5\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):          4.30e-143\n",
      "Time:                        19:30:10   Log-Likelihood:                -42118.\n",
      "No. Observations:                5840   AIC:                         8.424e+04\n",
      "Df Residuals:                    5836   BIC:                         8.427e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "================================================================================\n",
      "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------\n",
      "Intercept      -14.0310      8.034     -1.746      0.081     -29.782       1.719\n",
      "beds            14.4750      4.604      3.144      0.002       5.450      23.500\n",
      "bedrooms        75.8253      6.351     11.940      0.000      63.376      88.275\n",
      "accommodates    -1.9952      2.442     -0.817      0.414      -6.783       2.793\n",
      "==============================================================================\n",
      "Omnibus:                    13553.790   Durbin-Watson:                   1.370\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        100209932.480\n",
      "Skew:                          22.764   Prob(JB):                         0.00\n",
      "Kurtosis:                     643.116   Cond. No.                         12.8\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model24= smf.ols('price ~ beds+bedrooms+accommodates', data=listing1) \n",
    "results24 = price_model24.fit() \n",
    "print(results24.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.112\n",
      "Model:                            OLS   Adj. R-squared:                  0.112\n",
      "Method:                 Least Squares   F-statistic:                     184.7\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):          2.76e-149\n",
      "Time:                        19:32:52   Log-Likelihood:                -42100.\n",
      "No. Observations:                5840   AIC:                         8.421e+04\n",
      "Df Residuals:                    5835   BIC:                         8.424e+04\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=========================================================================================\n",
      "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "Intercept                -4.0061      8.192     -0.489      0.625     -20.066      12.054\n",
      "beds                     15.1589      4.592      3.301      0.001       6.156      24.161\n",
      "bedrooms                 73.4193      6.346     11.570      0.000      60.979      85.859\n",
      "accommodates             -0.7070      2.445     -0.289      0.772      -5.500       4.087\n",
      "number_of_reviews_ltm    -1.9592      0.334     -5.859      0.000      -2.615      -1.304\n",
      "==============================================================================\n",
      "Omnibus:                    13579.467   Durbin-Watson:                   1.368\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        101586219.637\n",
      "Skew:                          22.867   Prob(JB):                         0.00\n",
      "Kurtosis:                     647.505   Cond. No.                         30.6\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model25= smf.ols('price ~ beds+bedrooms+accommodates+number_of_reviews_ltm', data=listing1) \n",
    "results25 = price_model25.fit() \n",
    "print(results25.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.112\n",
      "Model:                            OLS   Adj. R-squared:                  0.112\n",
      "Method:                 Least Squares   F-statistic:                     147.8\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):          3.72e-148\n",
      "Time:                        19:33:57   Log-Likelihood:                -42100.\n",
      "No. Observations:                5840   AIC:                         8.421e+04\n",
      "Df Residuals:                    5834   BIC:                         8.425e+04\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept                 -4.0555      8.194     -0.495      0.621     -20.119      12.008\n",
      "beds                      15.1767      4.593      3.304      0.001       6.173      24.180\n",
      "bedrooms                  73.3963      6.347     11.565      0.000      60.955      85.838\n",
      "accommodates              -0.6988      2.445     -0.286      0.775      -5.493       4.095\n",
      "number_of_reviews_ltm     -1.8341      0.470     -3.905      0.000      -2.755      -0.913\n",
      "number_of_reviews_l30d    -1.8874      4.976     -0.379      0.704     -11.641       7.867\n",
      "==============================================================================\n",
      "Omnibus:                    13579.408   Durbin-Watson:                   1.368\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        101581843.667\n",
      "Skew:                          22.866   Prob(JB):                         0.00\n",
      "Kurtosis:                     647.491   Cond. No.                         30.6\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model26= smf.ols('price ~ beds+bedrooms+accommodates+number_of_reviews_ltm+number_of_reviews_l30d', data=listing1) \n",
    "results26 = price_model26.fit() \n",
    "print(results26.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.071\n",
      "Model:                            OLS   Adj. R-squared:                  0.070\n",
      "Method:                 Least Squares   F-statistic:                     61.61\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           6.95e-74\n",
      "Time:                        19:36:53   Log-Likelihood:                -34626.\n",
      "No. Observations:                4817   AIC:                         6.927e+04\n",
      "Df Residuals:                    4810   BIC:                         6.931e+04\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept                 20.5869     10.335      1.992      0.046       0.326      40.847\n",
      "beds                      11.4610      5.275      2.173      0.030       1.120      21.802\n",
      "bedrooms                  45.8742      8.529      5.378      0.000      29.153      62.595\n",
      "accommodates               7.5146      3.248      2.313      0.021       1.146      13.883\n",
      "number_of_reviews_ltm     -0.2855      0.619     -0.461      0.645      -1.499       0.928\n",
      "number_of_reviews_l30d    -1.6982      4.876     -0.348      0.728     -11.257       7.861\n",
      "reviews_per_month        -14.7556      4.663     -3.164      0.002     -23.897      -5.614\n",
      "==============================================================================\n",
      "Omnibus:                    11622.500   Durbin-Watson:                   1.201\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        108942523.652\n",
      "Skew:                          24.900   Prob(JB):                         0.00\n",
      "Kurtosis:                     738.058   Cond. No.                         41.1\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model26= smf.ols('price ~ beds+bedrooms+accommodates+number_of_reviews_ltm+number_of_reviews_l30d+reviews_per_month', data=listing1) \n",
    "results26 = price_model26.fit() \n",
    "print(results26.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.072\n",
      "Model:                            OLS   Adj. R-squared:                  0.071\n",
      "Method:                 Least Squares   F-statistic:                     53.03\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           2.80e-73\n",
      "Time:                        19:39:53   Log-Likelihood:                -34321.\n",
      "No. Observations:                4773   AIC:                         6.866e+04\n",
      "Df Residuals:                    4765   BIC:                         6.871e+04\n",
      "Df Model:                           7                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept               -105.5660     56.196     -1.879      0.060    -215.736       4.604\n",
      "beds                      10.9892      5.297      2.075      0.038       0.605      21.374\n",
      "bedrooms                  45.2077      8.583      5.267      0.000      28.381      62.034\n",
      "accommodates               7.9017      3.268      2.418      0.016       1.495      14.309\n",
      "number_of_reviews_ltm     -0.2507      0.621     -0.404      0.687      -1.468       0.967\n",
      "number_of_reviews_l30d    -1.5928      4.888     -0.326      0.745     -11.175       7.990\n",
      "reviews_per_month        -15.2626      4.700     -3.247      0.001     -24.477      -6.049\n",
      "review_scores_rating       1.3347      0.588      2.269      0.023       0.182       2.488\n",
      "==============================================================================\n",
      "Omnibus:                    11523.360   Durbin-Watson:                   1.198\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        107830366.151\n",
      "Skew:                          24.936   Prob(JB):                         0.00\n",
      "Kurtosis:                     737.653   Cond. No.                     1.16e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.16e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "price_model27= smf.ols('price ~ beds+bedrooms+accommodates+number_of_reviews_ltm+number_of_reviews_l30d+reviews_per_month+review_scores_rating', data=listing1) \n",
    "results27 = price_model27.fit() \n",
    "print(results27.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.073\n",
      "Model:                            OLS   Adj. R-squared:                  0.072\n",
      "Method:                 Least Squares   F-statistic:                     46.84\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           4.24e-73\n",
      "Time:                        19:41:52   Log-Likelihood:                -34198.\n",
      "No. Observations:                4755   AIC:                         6.841e+04\n",
      "Df Residuals:                    4746   BIC:                         6.847e+04\n",
      "Df Model:                           8                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept               -193.0608     70.473     -2.739      0.006    -331.221     -54.901\n",
      "beds                      10.7719      5.309      2.029      0.043       0.364      21.180\n",
      "bedrooms                  45.7657      8.608      5.317      0.000      28.890      62.641\n",
      "accommodates               7.7432      3.277      2.363      0.018       1.320      14.167\n",
      "number_of_reviews_ltm     -0.2700      0.625     -0.432      0.666      -1.494       0.954\n",
      "number_of_reviews_l30d    -1.7304      4.917     -0.352      0.725     -11.370       7.910\n",
      "reviews_per_month        -15.8456      4.725     -3.354      0.001     -25.108      -6.583\n",
      "review_scores_rating       0.5586      0.698      0.801      0.423      -0.809       1.926\n",
      "review_scores_location    16.7372      8.082      2.071      0.038       0.893      32.581\n",
      "==============================================================================\n",
      "Omnibus:                    11473.204   Durbin-Watson:                   1.199\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        106742308.066\n",
      "Skew:                          24.899   Prob(JB):                         0.00\n",
      "Kurtosis:                     735.313   Cond. No.                     1.46e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.46e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "price_model28= smf.ols('price ~ beds+bedrooms+accommodates+number_of_reviews_ltm+number_of_reviews_l30d+reviews_per_month+review_scores_rating+review_scores_location', data=listing1) \n",
    "results28 = price_model28.fit() \n",
    "print(results28.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.073\n",
      "Model:                            OLS   Adj. R-squared:                  0.071\n",
      "Method:                 Least Squares   F-statistic:                     41.63\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           2.96e-72\n",
      "Time:                        19:43:39   Log-Likelihood:                -34198.\n",
      "No. Observations:                4755   AIC:                         6.842e+04\n",
      "Df Residuals:                    4745   BIC:                         6.848e+04\n",
      "Df Model:                           9                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept               -175.4761    119.429     -1.469      0.142    -409.613      58.661\n",
      "has_availability[T.t]    -17.7484     97.313     -0.182      0.855    -208.527     173.030\n",
      "beds                      10.7903      5.310      2.032      0.042       0.380      21.201\n",
      "bedrooms                  45.7850      8.609      5.318      0.000      28.907      62.663\n",
      "accommodates               7.7328      3.277      2.359      0.018       1.308      14.158\n",
      "number_of_reviews_ltm     -0.2711      0.625     -0.434      0.664      -1.496       0.953\n",
      "number_of_reviews_l30d    -1.7311      4.918     -0.352      0.725     -11.372       7.910\n",
      "reviews_per_month        -15.8132      4.728     -3.344      0.001     -25.083      -6.543\n",
      "review_scores_rating       0.5606      0.698      0.803      0.422      -0.807       1.928\n",
      "review_scores_location    16.7231      8.083      2.069      0.039       0.877      32.569\n",
      "==============================================================================\n",
      "Omnibus:                    11473.278   Durbin-Watson:                   1.199\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        106747665.581\n",
      "Skew:                          24.900   Prob(JB):                         0.00\n",
      "Kurtosis:                     735.332   Cond. No.                     3.03e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.03e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "price_model29= smf.ols('price ~ beds+bedrooms+accommodates+number_of_reviews_ltm+number_of_reviews_l30d+reviews_per_month+review_scores_rating+review_scores_location+has_availability', data=listing1) \n",
    "results29 = price_model29.fit() \n",
    "print(results29.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.070\n",
      "Model:                            OLS   Adj. R-squared:                  0.069\n",
      "Method:                 Least Squares   F-statistic:                     89.08\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           4.06e-73\n",
      "Time:                        19:44:43   Log-Likelihood:                -34301.\n",
      "No. Observations:                4769   AIC:                         6.861e+04\n",
      "Df Residuals:                    4764   BIC:                         6.864e+04\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept               -198.0282     70.324     -2.816      0.005    -335.895     -60.161\n",
      "bedrooms                  77.3714      4.386     17.640      0.000      68.773      85.970\n",
      "reviews_per_month        -16.8116      3.001     -5.602      0.000     -22.694     -10.929\n",
      "review_scores_rating       0.4522      0.695      0.651      0.515      -0.911       1.815\n",
      "review_scores_location    18.3229      8.063      2.272      0.023       2.516      34.130\n",
      "==============================================================================\n",
      "Omnibus:                    11502.480   Durbin-Watson:                   1.202\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        107184721.240\n",
      "Skew:                          24.875   Prob(JB):                         0.00\n",
      "Kurtosis:                     735.757   Cond. No.                     1.45e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.45e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "price_model30= smf.ols('price ~ bedrooms+reviews_per_month+review_scores_rating+review_scores_location', data=listing1) \n",
    "results30 = price_model30.fit() \n",
    "print(results30.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.070\n",
      "Model:                            OLS   Adj. R-squared:                  0.069\n",
      "Method:                 Least Squares   F-statistic:                     118.6\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):           4.22e-74\n",
      "Time:                        19:46:05   Log-Likelihood:                -34301.\n",
      "No. Observations:                4769   AIC:                         6.861e+04\n",
      "Df Residuals:                    4765   BIC:                         6.864e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept               -182.3881     66.083     -2.760      0.006    -311.940     -52.836\n",
      "bedrooms                  77.4371      4.385     17.661      0.000      68.841      86.033\n",
      "reviews_per_month        -16.8166      3.001     -5.604      0.000     -22.699     -10.934\n",
      "review_scores_location    21.1264      6.814      3.100      0.002       7.767      34.486\n",
      "==============================================================================\n",
      "Omnibus:                    11502.085   Durbin-Watson:                   1.202\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        107151194.924\n",
      "Skew:                          24.873   Prob(JB):                         0.00\n",
      "Kurtosis:                     735.642   Cond. No.                         144.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model31= smf.ols('price ~ bedrooms+reviews_per_month+review_scores_location', data=listing1) \n",
    "results31 = price_model31.fit() \n",
    "print(results31.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6369\n",
       "unique       2\n",
       "top          t\n",
       "freq      5121\n",
       "Name: host_identity_verified, dtype: object"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['host_identity_verified'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "listing1['host_identity_verified'].replace('t',1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6369\n",
       "unique       2\n",
       "top          1\n",
       "freq      5121\n",
       "Name: host_identity_verified, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['host_identity_verified'].describe(include='all')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>host_response_rate</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>host_listings_count</th>\n",
       "      <th>host_total_listings_count</th>\n",
       "      <th>host_verifications</th>\n",
       "      <th>host_has_profile_pic</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>...</th>\n",
       "      <th>review_scores_communication</th>\n",
       "      <th>review_scores_location</th>\n",
       "      <th>review_scores_value</th>\n",
       "      <th>license</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>calculated_host_listings_count</th>\n",
       "      <th>calculated_host_listings_count_entire_homes</th>\n",
       "      <th>calculated_host_listings_count_private_rooms</th>\n",
       "      <th>calculated_host_listings_count_shared_rooms</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.372000e+03</td>\n",
       "      <td>6372</td>\n",
       "      <td>4800.000000</td>\n",
       "      <td>6369</td>\n",
       "      <td>6369.000000</td>\n",
       "      <td>6369.000000</td>\n",
       "      <td>6372</td>\n",
       "      <td>6369</td>\n",
       "      <td>6369.0</td>\n",
       "      <td>4704</td>\n",
       "      <td>...</td>\n",
       "      <td>5123.000000</td>\n",
       "      <td>5124.000000</td>\n",
       "      <td>5124.000000</td>\n",
       "      <td>6111</td>\n",
       "      <td>6372</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>6372.000000</td>\n",
       "      <td>5194.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6219</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>245</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2807</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>NaN</td>\n",
       "      <td>UChicago, Shops + Eats, Lake | Gym + W&amp;D | Zen...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['email', 'phone']</td>\n",
       "      <td>t</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Chicago, Illinois, United States</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>City registration pending</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4081</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>609</td>\n",
       "      <td>6358</td>\n",
       "      <td>5121.0</td>\n",
       "      <td>4678</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2055</td>\n",
       "      <td>3927</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.965478e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.938877</td>\n",
       "      <td>NaN</td>\n",
       "      <td>64.213848</td>\n",
       "      <td>64.213848</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>9.780793</td>\n",
       "      <td>9.710968</td>\n",
       "      <td>9.512685</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.459510</td>\n",
       "      <td>12.758475</td>\n",
       "      <td>1.422473</td>\n",
       "      <td>0.131827</td>\n",
       "      <td>1.577882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.365326e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.188929</td>\n",
       "      <td>NaN</td>\n",
       "      <td>271.892342</td>\n",
       "      <td>271.892342</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.729106</td>\n",
       "      <td>0.682588</td>\n",
       "      <td>0.833864</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40.937807</td>\n",
       "      <td>41.114728</td>\n",
       "      <td>3.088673</td>\n",
       "      <td>1.193641</td>\n",
       "      <td>1.633713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.384000e+03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.010000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.954508e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.370000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.225736e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.174502e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.340000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.820249e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2712.000000</td>\n",
       "      <td>2712.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>23.730000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  id                                               name  \\\n",
       "count   6.372000e+03                                               6372   \n",
       "unique           NaN                                               6219   \n",
       "top              NaN  UChicago, Shops + Eats, Lake | Gym + W&D | Zen...   \n",
       "freq             NaN                                                 14   \n",
       "mean    2.965478e+07                                                NaN   \n",
       "std     1.365326e+07                                                NaN   \n",
       "min     2.384000e+03                                                NaN   \n",
       "25%     1.954508e+07                                                NaN   \n",
       "50%     3.225736e+07                                                NaN   \n",
       "75%     4.174502e+07                                                NaN   \n",
       "max     4.820249e+07                                                NaN   \n",
       "\n",
       "        host_response_rate host_is_superhost  host_listings_count  \\\n",
       "count          4800.000000              6369          6369.000000   \n",
       "unique                 NaN                 2                  NaN   \n",
       "top                    NaN                 f                  NaN   \n",
       "freq                   NaN              4081                  NaN   \n",
       "mean              0.938877               NaN            64.213848   \n",
       "std               0.188929               NaN           271.892342   \n",
       "min               0.000000               NaN             0.000000   \n",
       "25%               0.990000               NaN             1.000000   \n",
       "50%               1.000000               NaN             2.000000   \n",
       "75%               1.000000               NaN             7.000000   \n",
       "max               1.000000               NaN          2712.000000   \n",
       "\n",
       "        host_total_listings_count  host_verifications host_has_profile_pic  \\\n",
       "count                 6369.000000                6372                 6369   \n",
       "unique                        NaN                 245                    2   \n",
       "top                           NaN  ['email', 'phone']                    t   \n",
       "freq                          NaN                 609                 6358   \n",
       "mean                    64.213848                 NaN                  NaN   \n",
       "std                    271.892342                 NaN                  NaN   \n",
       "min                      0.000000                 NaN                  NaN   \n",
       "25%                      1.000000                 NaN                  NaN   \n",
       "50%                      2.000000                 NaN                  NaN   \n",
       "75%                      7.000000                 NaN                  NaN   \n",
       "max                   2712.000000                 NaN                  NaN   \n",
       "\n",
       "        host_identity_verified                     neighbourhood  ...  \\\n",
       "count                   6369.0                              4704  ...   \n",
       "unique                     2.0                                14  ...   \n",
       "top                        1.0  Chicago, Illinois, United States  ...   \n",
       "freq                    5121.0                              4678  ...   \n",
       "mean                       NaN                               NaN  ...   \n",
       "std                        NaN                               NaN  ...   \n",
       "min                        NaN                               NaN  ...   \n",
       "25%                        NaN                               NaN  ...   \n",
       "50%                        NaN                               NaN  ...   \n",
       "75%                        NaN                               NaN  ...   \n",
       "max                        NaN                               NaN  ...   \n",
       "\n",
       "       review_scores_communication review_scores_location review_scores_value  \\\n",
       "count                  5123.000000            5124.000000         5124.000000   \n",
       "unique                         NaN                    NaN                 NaN   \n",
       "top                            NaN                    NaN                 NaN   \n",
       "freq                           NaN                    NaN                 NaN   \n",
       "mean                      9.780793               9.710968            9.512685   \n",
       "std                       0.729106               0.682588            0.833864   \n",
       "min                       2.000000               2.000000            2.000000   \n",
       "25%                      10.000000              10.000000            9.000000   \n",
       "50%                      10.000000              10.000000           10.000000   \n",
       "75%                      10.000000              10.000000           10.000000   \n",
       "max                      10.000000              10.000000           10.000000   \n",
       "\n",
       "                          license instant_bookable  \\\n",
       "count                        6111             6372   \n",
       "unique                       2807                2   \n",
       "top     City registration pending                f   \n",
       "freq                         2055             3927   \n",
       "mean                          NaN              NaN   \n",
       "std                           NaN              NaN   \n",
       "min                           NaN              NaN   \n",
       "25%                           NaN              NaN   \n",
       "50%                           NaN              NaN   \n",
       "75%                           NaN              NaN   \n",
       "max                           NaN              NaN   \n",
       "\n",
       "        calculated_host_listings_count  \\\n",
       "count                      6372.000000   \n",
       "unique                             NaN   \n",
       "top                                NaN   \n",
       "freq                               NaN   \n",
       "mean                         14.459510   \n",
       "std                          40.937807   \n",
       "min                           1.000000   \n",
       "25%                           1.000000   \n",
       "50%                           2.000000   \n",
       "75%                           7.000000   \n",
       "max                         220.000000   \n",
       "\n",
       "        calculated_host_listings_count_entire_homes  \\\n",
       "count                                   6372.000000   \n",
       "unique                                          NaN   \n",
       "top                                             NaN   \n",
       "freq                                            NaN   \n",
       "mean                                      12.758475   \n",
       "std                                       41.114728   \n",
       "min                                        0.000000   \n",
       "25%                                        1.000000   \n",
       "50%                                        1.000000   \n",
       "75%                                        4.000000   \n",
       "max                                      220.000000   \n",
       "\n",
       "       calculated_host_listings_count_private_rooms  \\\n",
       "count                                   6372.000000   \n",
       "unique                                          NaN   \n",
       "top                                             NaN   \n",
       "freq                                            NaN   \n",
       "mean                                       1.422473   \n",
       "std                                        3.088673   \n",
       "min                                        0.000000   \n",
       "25%                                        0.000000   \n",
       "50%                                        0.000000   \n",
       "75%                                        1.000000   \n",
       "max                                       20.000000   \n",
       "\n",
       "        calculated_host_listings_count_shared_rooms  reviews_per_month  \n",
       "count                                   6372.000000        5194.000000  \n",
       "unique                                          NaN                NaN  \n",
       "top                                             NaN                NaN  \n",
       "freq                                            NaN                NaN  \n",
       "mean                                       0.131827           1.577882  \n",
       "std                                        1.193641           1.633713  \n",
       "min                                        0.000000           0.010000  \n",
       "25%                                        0.000000           0.370000  \n",
       "50%                                        0.000000           1.050000  \n",
       "75%                                        0.000000           2.340000  \n",
       "max                                       16.000000          23.730000  \n",
       "\n",
       "[11 rows x 45 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1.describe(include='all')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                    0.1749\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):              0.676\n",
      "Time:                        20:06:21   Log-Likelihood:                -46831.\n",
      "No. Observations:                6369   AIC:                         9.367e+04\n",
      "Df Residuals:                    6367   BIC:                         9.368e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================================\n",
      "                                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------------\n",
      "Intercept                     144.9121      5.278     27.454      0.000     134.565     155.259\n",
      "host_identity_verified[T.f]     4.9869     11.924      0.418      0.676     -18.388      28.362\n",
      "==============================================================================\n",
      "Omnibus:                    14007.795   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65185290.799\n",
      "Skew:                          20.178   Prob(JB):                         0.00\n",
      "Kurtosis:                     496.970   Cond. No.                         2.63\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model32= smf.ols('price ~ host_identity_verified', data=listing1) \n",
    "results32 = price_model32.fit() \n",
    "print(results32.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6369\n",
       "unique       2\n",
       "top          1\n",
       "freq      5121\n",
       "Name: host_identity_verified, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['host_identity_verified'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                 0.0003351\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):              0.985\n",
      "Time:                        20:07:01   Log-Likelihood:                -46852.\n",
      "No. Observations:                6372   AIC:                         9.371e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=========================================================================================\n",
      "                            coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------------\n",
      "Intercept               144.7692     60.471      2.394      0.017      26.225     263.314\n",
      "has_availability[T.t]     1.1104     60.657      0.018      0.985    -117.798     120.019\n",
      "==============================================================================\n",
      "Omnibus:                    14015.065   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65247799.295\n",
      "Skew:                          20.180   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.091   Cond. No.                         25.5\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model33= smf.ols('price ~ has_availability', data=listing1) \n",
    "results33 = price_model33.fit() \n",
    "print(results33.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372\n",
       "unique       2\n",
       "top          t\n",
       "freq      6333\n",
       "Name: has_availability, dtype: object"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['has_availability'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     6372\n",
       "unique       2\n",
       "top          f\n",
       "freq      3927\n",
       "Name: instant_bookable, dtype: object"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['instant_bookable'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean        0.383710\n",
       "std         0.486327\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: instant_bookable, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6372.000000\n",
       "mean        0.993879\n",
       "std         0.078000\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         1.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: has_availability, dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['has_availability'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6369.000000\n",
       "mean        0.804051\n",
       "std         0.396961\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         1.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: host_identity_verified, dtype: float64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing1['host_identity_verified'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    6369.000000\n",
       "mean        0.998273\n",
       "std         0.041526\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         1.000000\n",
       "75%         1.000000\n",
       "max         1.000000\n",
       "Name: host_has_profile_pic, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listing2['host_has_profile_pic'].describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                    0.1346\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):              0.714\n",
      "Time:                        20:11:28   Log-Likelihood:                -46852.\n",
      "No. Observations:                6372   AIC:                         9.371e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "Intercept          144.5034      6.026     23.979      0.000     132.690     156.317\n",
      "instant_bookable     3.5690      9.729      0.367      0.714     -15.502      22.640\n",
      "==============================================================================\n",
      "Omnibus:                    14014.375   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65223981.893\n",
      "Skew:                          20.178   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.000   Cond. No.                         2.43\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model34= smf.ols('price ~ instant_bookable', data=listing1) \n",
    "results34 = price_model34.fit() \n",
    "print(results34.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                 0.0003351\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):              0.985\n",
      "Time:                        20:12:23   Log-Likelihood:                -46852.\n",
      "No. Observations:                6372   AIC:                         9.371e+04\n",
      "Df Residuals:                    6370   BIC:                         9.372e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "Intercept          144.7692     60.471      2.394      0.017      26.225     263.314\n",
      "has_availability     1.1104     60.657      0.018      0.985    -117.798     120.019\n",
      "==============================================================================\n",
      "Omnibus:                    14015.065   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65247799.295\n",
      "Skew:                          20.180   Prob(JB):                         0.00\n",
      "Kurtosis:                     497.091   Cond. No.                         25.5\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model35= smf.ols('price ~ has_availability', data=listing1) \n",
    "results35 = price_model35.fit() \n",
    "print(results35.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                   0.09109\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):              0.763\n",
      "Time:                        20:13:15   Log-Likelihood:                -46831.\n",
      "No. Observations:                6369   AIC:                         9.367e+04\n",
      "Df Residuals:                    6367   BIC:                         9.368e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "========================================================================================\n",
      "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------\n",
      "Intercept              111.5455    113.889      0.979      0.327    -111.715     334.806\n",
      "host_has_profile_pic    34.4033    113.987      0.302      0.763    -189.051     257.857\n",
      "==============================================================================\n",
      "Omnibus:                    14007.168   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65160006.450\n",
      "Skew:                          20.176   Prob(JB):                         0.00\n",
      "Kurtosis:                     496.874   Cond. No.                         48.1\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model36= smf.ols('price ~ host_has_profile_pic', data=listing1) \n",
    "results36 = price_model36.fit() \n",
    "print(results36.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                 -0.000\n",
      "Method:                 Least Squares   F-statistic:                    0.1749\n",
      "Date:                Tue, 30 Mar 2021   Prob (F-statistic):              0.676\n",
      "Time:                        20:23:55   Log-Likelihood:                -46831.\n",
      "No. Observations:                6369   AIC:                         9.367e+04\n",
      "Df Residuals:                    6367   BIC:                         9.368e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Intercept                149.8990     10.692     14.019      0.000     128.939     170.859\n",
      "host_identity_verified    -4.9869     11.924     -0.418      0.676     -28.362      18.388\n",
      "==============================================================================\n",
      "Omnibus:                    14007.795   Durbin-Watson:                   1.563\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65185290.799\n",
      "Skew:                          20.178   Prob(JB):                         0.00\n",
      "Kurtosis:                     496.970   Cond. No.                         4.31\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "price_model37= smf.ols('price ~ host_identity_verified', data=listing1) \n",
    "results37 = price_model37.fit() \n",
    "print(results37.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
